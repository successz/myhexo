{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-skapp/source/img/quotes.png","path":"img/quotes.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/fonts/iconfont.eot","path":"fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/fonts/iconfont.svg","path":"fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/fonts/iconfont.ttf","path":"fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/fonts/iconfont.woff","path":"fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/js/common/animation.js","path":"js/common/animation.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/js/common/pack.js","path":"js/common/pack.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/js/common/utils.js","path":"js/common/utils.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/js/layout/back-top.js","path":"js/layout/back-top.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/js/layout/header.js","path":"js/layout/header.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/js/layout/post.js","path":"js/layout/post.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/js/layout/loading.js","path":"js/layout/loading.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/js/page/post.js","path":"js/page/post.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/js/libs/lunr.min.js","path":"js/libs/lunr.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/js/libs/axios.min.js","path":"js/libs/axios.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/js/page/search.js","path":"js/page/search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/js/page/archive.js","path":"js/page/archive.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/scss/base/index.scss","path":"scss/base/index.scss","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/scss/views/page/category.scss","path":"scss/views/page/category.scss","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/scss/views/page/about.scss","path":"scss/views/page/about.scss","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/scss/views/page/index.scss","path":"scss/views/page/index.scss","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/scss/views/page/post.scss","path":"scss/views/page/post.scss","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/scss/views/page/error.scss","path":"scss/views/page/error.scss","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/scss/views/page/search.scss","path":"scss/views/page/search.scss","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/scss/views/page/tag.scss","path":"scss/views/page/tag.scss","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/scss/views/page/archive.scss","path":"scss/views/page/archive.scss","modified":0,"renderable":1}],"Cache":[{"_id":"themes/hexo-theme-skapp/.gitignore","hash":"7905b1da0d40b6625ed820acb20ed66c75c51029","modified":1516327426568},{"_id":"themes/hexo-theme-skapp/LICENSE","hash":"348ad688e145bb442f07e6e5b762d3e8ba66190e","modified":1516256607179},{"_id":"themes/hexo-theme-skapp/_config.yml","hash":"8cc279fcd552b15c547566d7a22cd6f1fc54aaf7","modified":1524813606051},{"_id":"themes/hexo-theme-skapp/README.md","hash":"e59510b46b3f7613a9d8f78c6ef9ffdf8aee0aed","modified":1516256607050},{"_id":"themes/hexo-theme-skapp/package.json","hash":"46ab781f3d3b8937b0868593293e0ab24b6ea919","modified":1516256607118},{"_id":"source/_posts/hotcss.md","hash":"6204ad327723cdfd744c068991fc0597cf02c9db","modified":1518317552816},{"_id":"source/_posts/timing.md","hash":"86c6a997509581a1fdd15c2a83b28e0209dcb7a8","modified":1517879017096},{"_id":"source/_posts/css.md","hash":"0e5217a7578b964453ea15ca3d2a2ee3c12ee975","modified":1517886046303},{"_id":"source/_posts/quci.md","hash":"b937c70ebd294a927fff63f782f93fe59e965975","modified":1517885713059},{"_id":"source/404/index.md","hash":"dca0f5d78a26f6a0c56cf5769ca53af5b3ef6e6a","modified":1516844692049},{"_id":"source/search/index.md","hash":"55ede6b72ec8263ae5b2089801386bd8600e0357","modified":1516844724390},{"_id":"source/_data/contact.yml","hash":"0a590507cd10644ccdc2bf46f4ce4502dd2e4a3a","modified":1516862093649},{"_id":"source/about/index.md","hash":"e4bcefa06b2401166c266563354d1bb9b24acf55","modified":1516846158980},{"_id":"source/_posts/slice.md","hash":"65f558e2c29d684847475859d6ff7f6410769945","modified":1517897733902},{"_id":"source/_posts/https.md","hash":"ea6c88a5b2f6881ec81f0ea3bf8b78b57fdfec85","modified":1517886146126},{"_id":"source/_posts/rander.md","hash":"2a53ffa915d60c61d3967d4eb5aa5a6d55f57a9e","modified":1517889839492},{"_id":"themes/hexo-theme-skapp/layout/category.swig","hash":"76011b6dfd36b0463f2fd889502d66a5ffe4dd47","modified":1516256607961},{"_id":"themes/hexo-theme-skapp/layout/archive.swig","hash":"849e65f1ba9abac099bec115c62af8d046faad7e","modified":1516256607450},{"_id":"themes/hexo-theme-skapp/layout/about.swig","hash":"83626cbda47aabc3f7ee4f008bad300eb1e37aba","modified":1516256607832},{"_id":"themes/hexo-theme-skapp/layout/error.swig","hash":"8d25b0d25ea70d86663f6f79c3506b7487bd98d5","modified":1516256607565},{"_id":"themes/hexo-theme-skapp/layout/index.swig","hash":"d902a5515ff3e8a7aa24a7f19b453daa30d0de99","modified":1516256607824},{"_id":"themes/hexo-theme-skapp/layout/search.swig","hash":"c1e34b81bacb0c9565779b51ab1fe6559c1ef566","modified":1516256607704},{"_id":"themes/hexo-theme-skapp/layout/tag.swig","hash":"5d22856055faee9fa3c2f12516855b823c5630e8","modified":1516256607577},{"_id":"themes/hexo-theme-skapp/scripts/helper.js","hash":"6cc5657d5c60d09fb83eaf93b343268454aadc39","modified":1516256606725},{"_id":"themes/hexo-theme-skapp/scripts/renderer.js","hash":"adec34bbe8d53decb7a54bf50bc1d9a045a12c1c","modified":1516256606787},{"_id":"themes/hexo-theme-skapp/layout/post.swig","hash":"2a946e9a7503accf6b1621a7ff22ef1d94f953a9","modified":1516256607954},{"_id":"themes/hexo-theme-skapp/languages/en.yml","hash":"361f4cb3e20a425eb0889931b7acbd81ab6404cd","modified":1516256606858},{"_id":"themes/hexo-theme-skapp/languages/zh-cn.yml","hash":"950976574893ba117702cf5eb448a636afd6a539","modified":1516256606918},{"_id":"themes/hexo-theme-skapp/layout/_layout.swig","hash":"d7631ff8d2cc930793f25509d1d6fc101d56ed50","modified":1517899855613},{"_id":"source/_posts/gitcmd.md","hash":"d9210e924bc3023ce4e9fd2221ee84fee78d1633","modified":1523494463463},{"_id":"themes/hexo-theme-skapp/source/img/quotes.png","hash":"4510107c2b0ea522ac2dc2048cb7471b468af5ff","modified":1516256604393},{"_id":"themes/hexo-theme-skapp/source/fonts/iconfont.eot","hash":"87bd2f3e4f3b26d80fe97943b8deec98168affc2","modified":1516256602884},{"_id":"themes/hexo-theme-skapp/source/fonts/iconfont.svg","hash":"88c42c2bd4256f13a0f885abe01a4cc65b2c5a45","modified":1516256602754},{"_id":"themes/hexo-theme-skapp/source/scss/_theme.scss","hash":"f02056f560555d1a2938bfebea35f14185257792","modified":1516256604462},{"_id":"themes/hexo-theme-skapp/source/scss/base/_input.scss","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1516256604819},{"_id":"themes/hexo-theme-skapp/layout/_partial/about/main.swig","hash":"6d532834ecc639ff61ecba6109921193a6ebc8c9","modified":1516256609064},{"_id":"themes/hexo-theme-skapp/layout/_partial/category/main.swig","hash":"eea7cafb4a8f83d89fa10312bd65f172716b10cf","modified":1516256609384},{"_id":"themes/hexo-theme-skapp/source/fonts/iconfont.ttf","hash":"cbe6cffb573ef986e91c6705c9839a9c53edb1c8","modified":1516256602792},{"_id":"themes/hexo-theme-skapp/source/fonts/iconfont.woff","hash":"37b11e65abc366b2b4a212a302b36f7152921625","modified":1516256602922},{"_id":"themes/hexo-theme-skapp/layout/_partial/common/footer.swig","hash":"d927eae316768f0700a9af424bc84394bfba069b","modified":1517900024150},{"_id":"themes/hexo-theme-skapp/layout/_partial/common/back-top.swig","hash":"431866aacaab8805590b0e09de1c908f67a5f54d","modified":1516256610264},{"_id":"themes/hexo-theme-skapp/layout/_partial/archive/main.swig","hash":"6cab2dce88926d820395d765f57184514db20a31","modified":1516256609035},{"_id":"themes/hexo-theme-skapp/layout/_partial/common/analytics.swig","hash":"2c1f77dabe54f04c4a9a2865fac65a8f32d6aa98","modified":1516256610004},{"_id":"themes/hexo-theme-skapp/layout/_partial/common/loader.swig","hash":"e8b7c60f6186d6309d35e321bdbb486ef11d3e97","modified":1516256610227},{"_id":"themes/hexo-theme-skapp/layout/_partial/common/error-header.swig","hash":"7468ed219619f89ed1331da6b8faf4e74af9bbd7","modified":1516256610394},{"_id":"themes/hexo-theme-skapp/layout/_partial/common/small-header.swig","hash":"5222d7d76ef0f89181a442b66008b8d23d5e8d74","modified":1516256610655},{"_id":"themes/hexo-theme-skapp/layout/_partial/common/head.swig","hash":"93dfc565613bd4ef06a34d49a235be3433a43379","modified":1516256610525},{"_id":"themes/hexo-theme-skapp/layout/_partial/index/main.swig","hash":"eea7cafb4a8f83d89fa10312bd65f172716b10cf","modified":1516256609354},{"_id":"themes/hexo-theme-skapp/layout/_partial/common/prefetch.swig","hash":"9a28af3878333cc843f073909c9180e1eab83ba9","modified":1516256610357},{"_id":"themes/hexo-theme-skapp/layout/_partial/common/sidebar.swig","hash":"756ba972946317406f1b1be97196cafd5d577666","modified":1516256610488},{"_id":"themes/hexo-theme-skapp/layout/_partial/post/main.swig","hash":"97b21ffbfebe31444acb02109e19a27677b3e98a","modified":1516256608715},{"_id":"themes/hexo-theme-skapp/layout/_partial/search/main.swig","hash":"88216dfef45a4c8b3d9697bccc30d1da3f9fbee4","modified":1516256608483},{"_id":"themes/hexo-theme-skapp/layout/_partial/error/main.swig","hash":"07bc5bc17756e428235fba0e820b77bb9705e627","modified":1516256609707},{"_id":"themes/hexo-theme-skapp/layout/_partial/tag/main.swig","hash":"eea7cafb4a8f83d89fa10312bd65f172716b10cf","modified":1516256609679},{"_id":"themes/hexo-theme-skapp/layout/_partial/post/content.swig","hash":"4c08d778a664129ecf0a1da1620f76cedda30ea4","modified":1516256608614},{"_id":"themes/hexo-theme-skapp/layout/_partial/post/mini.swig","hash":"f62e9c7c5b3b160975d2e29730a3adeba1556ae4","modified":1516256608745},{"_id":"themes/hexo-theme-skapp/source/js/common/animation.js","hash":"4d360fdde4bf2a891e9b921dd10c34e137447e47","modified":1516256603996},{"_id":"themes/hexo-theme-skapp/layout/_partial/common/header.swig","hash":"eda9abd3b086f9084ae1f21a1ebe55194a2419ab","modified":1516256610619},{"_id":"themes/hexo-theme-skapp/source/js/common/pack.js","hash":"00b906b3d2ab92f8a169ad9e495a83733188d3f7","modified":1516256604065},{"_id":"themes/hexo-theme-skapp/source/js/common/utils.js","hash":"9c0e7a01f07a332e69fdd3ae6a7d6b14c217e4b8","modified":1516256604125},{"_id":"themes/hexo-theme-skapp/layout/_partial/common/comment.swig","hash":"72b84bf0e8d23f0a35127da70013aea778a9375b","modified":1516256610133},{"_id":"themes/hexo-theme-skapp/source/js/layout/back-top.js","hash":"ada2d0ac7b4d7cf8e755572ffa2505ea84063917","modified":1516256603402},{"_id":"themes/hexo-theme-skapp/source/js/layout/header.js","hash":"9e013fa56d999c669ea62d22220b624c56511b36","modified":1516256603532},{"_id":"themes/hexo-theme-skapp/source/js/layout/post.js","hash":"e80ab1ff01783b018fa7d2c63591603e53345e23","modified":1516256603342},{"_id":"themes/hexo-theme-skapp/source/js/layout/loading.js","hash":"653bd858627880d87a2481660ea6f7b35780aa7b","modified":1516256603472},{"_id":"themes/hexo-theme-skapp/source/js/page/post.js","hash":"691de1e5863ba863b6cf015af6dd0de4ea51192c","modified":1516256603793},{"_id":"themes/hexo-theme-skapp/source/js/libs/lunr.min.js","hash":"6af45288bd3cf5d3be1e595eb544fe84ea5900aa","modified":1516256603211},{"_id":"themes/hexo-theme-skapp/layout/_partial/post/post-statistical.swig","hash":"b45afecc44ecd8578b6f7c6daba19b41b872a0f5","modified":1516256608583},{"_id":"themes/hexo-theme-skapp/source/scss/base/_element.scss","hash":"2731e14c5447a5d0b620c85598b69dba56c05f03","modified":1516256604783},{"_id":"themes/hexo-theme-skapp/source/js/libs/axios.min.js","hash":"466d49238fad59ff522440c609502e01ca000558","modified":1516256603273},{"_id":"themes/hexo-theme-skapp/source/js/page/search.js","hash":"8bd8bffdac5cc51ee8c0a268e85292a14851d7a5","modified":1516256603853},{"_id":"themes/hexo-theme-skapp/source/js/page/archive.js","hash":"de96e21783bc3007489909526f9a346a8e7e4f2e","modified":1516256603933},{"_id":"themes/hexo-theme-skapp/source/scss/base/_font.scss","hash":"9886f69ef10beb3c7f2c3efd652a4b6d21dc069d","modified":1516256605044},{"_id":"themes/hexo-theme-skapp/source/scss/base/_js-toggle.scss","hash":"0d1e23f1775a7696d98924606379273f79eba0d1","modified":1516256604715},{"_id":"themes/hexo-theme-skapp/source/scss/base/_mixins.scss","hash":"ff393446fb6a98be633a613d596c577dc2afbdfd","modified":1516256604846},{"_id":"themes/hexo-theme-skapp/source/scss/base/index.scss","hash":"c95bdb29c2b1e1a9ac67e626d1e4e2d38f509b63","modified":1516256604974},{"_id":"themes/hexo-theme-skapp/source/scss/views/layout/_back-top.scss","hash":"5fa2593f9d6875c8e0780d889e6bb6b3183aa8bb","modified":1516256605365},{"_id":"themes/hexo-theme-skapp/source/scss/views/layout/_index.scss","hash":"419ca53eaffc9a7e20fbce92a9c6e276008b707a","modified":1516256605756},{"_id":"themes/hexo-theme-skapp/source/scss/views/layout/_footer.scss","hash":"6be99d8932e0e8f60e5b8b5c657abeb8876ec572","modified":1516256605496},{"_id":"themes/hexo-theme-skapp/source/scss/views/layout/_loading.scss","hash":"833010d3f05fa5b8620471d8f7361db679398f55","modified":1516256605818},{"_id":"themes/hexo-theme-skapp/source/scss/views/layout/_container.scss","hash":"5be8d3f29aed5b308fe207e6296e22fa4f24ddfb","modified":1516256605297},{"_id":"themes/hexo-theme-skapp/source/scss/views/layout/_header.scss","hash":"9878b45930090b7b4356564ce13d4a833729f8e2","modified":1516256605558},{"_id":"themes/hexo-theme-skapp/source/scss/views/page/category.scss","hash":"060931308b8ac3740ca3928afeb6246041cf9a84","modified":1516256606274},{"_id":"themes/hexo-theme-skapp/source/scss/views/page/about.scss","hash":"bb45079d117def23f5f8e90c0afec36e8d157f3c","modified":1516256605885},{"_id":"themes/hexo-theme-skapp/source/scss/views/layout/_sidebar.scss","hash":"77a9cab2ee969b6ef27ecc88387c94cb0a6b7931","modified":1516256605627},{"_id":"themes/hexo-theme-skapp/source/scss/views/page/index.scss","hash":"8fa3cfcecc08182de1005554e7f88c57bb8ac898","modified":1516256606206},{"_id":"themes/hexo-theme-skapp/source/scss/views/layout/_paginator.scss","hash":"1d4ceeb90de6f218dcc955eee5631c0b0bf298c9","modified":1516256605687},{"_id":"themes/hexo-theme-skapp/source/scss/views/layout/_mini-post.scss","hash":"3146e8b3d63f03e1829918df457bf46c27cc6450","modified":1516256605426},{"_id":"themes/hexo-theme-skapp/source/scss/views/page/post.scss","hash":"ff2eb070c17b4c2029c110c53e2658e7fa1c222a","modified":1516256605946},{"_id":"themes/hexo-theme-skapp/source/scss/views/page/error.scss","hash":"00f58a708061bdca7be9f46ce31fb901dfabe704","modified":1516256606017},{"_id":"themes/hexo-theme-skapp/source/scss/views/page/search.scss","hash":"77a01672cd6cfe3bb9a1b6f1492fafd246328f03","modified":1516256606077},{"_id":"themes/hexo-theme-skapp/source/scss/views/page/tag.scss","hash":"060931308b8ac3740ca3928afeb6246041cf9a84","modified":1516256606334},{"_id":"themes/hexo-theme-skapp/source/scss/views/page/archive.scss","hash":"4293ad184519a7deae36aba495480cb296496cc6","modified":1516256606146},{"_id":"public/atom.xml","hash":"6454697f1e680a7e97840c4cdb67884a65a811b5","modified":1524813793706},{"_id":"public/sitemap.xml","hash":"fcec3fe14cf244a7ce810a3734c1494a9edf5a6c","modified":1524813793710},{"_id":"public/assets/lunr/2018.json","hash":"cc68d54497a446b6b93b90acf00fff368b7c3498","modified":1524813793711},{"_id":"public/assets/lunr/all.json","hash":"cc68d54497a446b6b93b90acf00fff368b7c3498","modified":1524813793711},{"_id":"public/404/index.html","hash":"4b9ce37aeecc773fc59f188e21ec1bbfac265756","modified":1518317681091},{"_id":"public/search/index.html","hash":"28ba31b5766c2081f8c1afa78d77a5ac0484e5c4","modified":1524813793710},{"_id":"public/2018/02/06/slice/index.html","hash":"5c88c2fef0bf5ff02c762bf1aa43105c9d1828c0","modified":1524813793734},{"_id":"public/2018/02/06/quci/index.html","hash":"9e0070433bb2e13a686d4f308c9c143adbf540ae","modified":1524813793735},{"_id":"public/2018/02/11/hotcss/index.html","hash":"fbe772d863cd50d4a8a3ff07072c7e78b1c2b689","modified":1524813793728},{"_id":"public/2018/02/06/rander/index.html","hash":"c29a4b747876c4c44b1b4e9b8c98a47afed71340","modified":1524813793734},{"_id":"public/about/index.html","hash":"0af40621a918ca3df36ca0bfa67210daa0b92fc3","modified":1524813793712},{"_id":"public/2018/01/23/gitcmd/index.html","hash":"0ad4dcad479acac2861f21b78bcbfc114bac252f","modified":1524813793735},{"_id":"public/archives/index.html","hash":"e8f5f2af7d7ee0abd45da92581c83709faa4a286","modified":1524813793735},{"_id":"public/archives/2018/index.html","hash":"10a5294269247265130b8e7e35228a28495eb9d6","modified":1524813793735},{"_id":"public/archives/2018/01/index.html","hash":"9a107ccf266f645217c9f7d724cdcce6c9174e07","modified":1524813793736},{"_id":"public/archives/2018/02/index.html","hash":"15e9b13f42ad040091368dd292d2923ec25ed35d","modified":1524813793743},{"_id":"public/categories/css/index.html","hash":"249109cf127318c36db27f499d80293ee54b07e2","modified":1524813793743},{"_id":"public/2018/02/06/css/index.html","hash":"cd86d8c5d370150a0b2ad773724400ad998bbdbf","modified":1524813793735},{"_id":"public/categories/linux文章/index.html","hash":"2ff2745399b737cde2f9abde5acc0e62e24ab8a7","modified":1524813793743},{"_id":"public/categories/html/index.html","hash":"c0f1527f481c09964da1e76dbcd3017dd0ec755b","modified":1524813793759},{"_id":"public/categories/js/index.html","hash":"b22a13a83274c48bf57c6a85e9cc4a90f08174f2","modified":1524813793743},{"_id":"public/2018/02/06/timing/index.html","hash":"432c8639a25c566d1a8bc441f99c5b68884f870c","modified":1524813793736},{"_id":"public/categories/css/js/index.html","hash":"bd559de8cd647480260496f517a7dd6b44916f1e","modified":1524813793760},{"_id":"public/2018/02/05/https/index.html","hash":"75a6622cec153c9800217c9f4169019f7bdb0754","modified":1524813793736},{"_id":"public/index.html","hash":"017f0e1acbcac4ecb3d61b4ed8f388559cde02cf","modified":1524813793749},{"_id":"public/tags/js/index.html","hash":"0c54914217bdd052de784b9f42743911a336c62d","modified":1524813793760},{"_id":"public/tags/css/index.html","hash":"40f7f484ca88a6f841d3bb879c5909ca00f5db01","modified":1524813793761},{"_id":"public/tags/https/index.html","hash":"d115d1ee96d7a136606986b117a36ccaf8daf94f","modified":1524813793760},{"_id":"public/tags/linux/index.html","hash":"413b4d94dae7ef802db70586d5eb8e3285f02db3","modified":1524813793762},{"_id":"public/js/common.js","hash":"d5a8d102b6cc908d721b7d453bbdb6dd0e6a4ad5","modified":1518317681120},{"_id":"public/tags/html/index.html","hash":"e506753f14e45c56c0fa6c6e9eed20a32de35a9c","modified":1524813793762},{"_id":"public/js/search.js","hash":"c4ab36175b7ee54680cc28a881a4c51b473e5b54","modified":1518317681120},{"_id":"public/tags/git/index.html","hash":"e832f12592c455aed254e08b49b15f2175b575c7","modified":1524813793762},{"_id":"source/_posts/http.md","hash":"4939acc5fec28a57e8cb9c2f7e03f98c2a6e17d9","modified":1523446840134},{"_id":"public/2018/04/10/http/index.html","hash":"ea7ce7347dfbf7c01a68f936f234c6efa1e7b4a1","modified":1524813793714},{"_id":"public/archives/2018/04/index.html","hash":"a83e012801ee384087c7bd869ec91e781e036502","modified":1524813793743},{"_id":"public/categories/http/index.html","hash":"8e70e6496a618d30fdaa87814dda3f5e3e801aae","modified":1524813793759},{"_id":"public/tags/http/index.html","hash":"d0598256ccde556c1d92f31b6811feecf84beeb3","modified":1524813793762},{"_id":"source/_posts/es6.md","hash":"a37a4a372422acb95862e59890f69ae72a9efaa6","modified":1524812187941},{"_id":"public/2018/04/10/es6/index.html","hash":"9368a6694bc4b5f6bea4de06f9d145baf2b9a834","modified":1524813793715},{"_id":"source/_posts/getComputedStyle.md","hash":"a72319422859ba798bfa3945033a7abca6bf5ea9","modified":1524812576316},{"_id":"public/2018/03/22/getComputedStyle/index.html","hash":"0c41222c700dcc47c93382612ee272eafe3c347b","modified":1524813793713},{"_id":"public/archives/2018/03/index.html","hash":"c7071977af0d6a45dbd501a50b23bcdc963f3a54","modified":1524813793743}],"Category":[{"name":"css","_id":"cjdi72vij00049gr6u4q512ra"},{"name":"linux文章","_id":"cjdi72vjg000g9gr6xjw389uk"},{"name":"js","_id":"cjdi72vjm000l9gr65rni8zz6"},{"name":"js","parent":"cjdi72vij00049gr6u4q512ra","_id":"cjdi72vjq000q9gr6n5ltwyxk"},{"name":"html","_id":"cjdi72vjs000t9gr6he308dqy"},{"name":"http","_id":"cjfv0h9670001f8r69q4zhnhw"}],"Data":[{"_id":"contact","data":[{"title":"github","icon":"icon-github","link":"https://github.com/successz"},{"title":"email","icon":"icon-email","link":"284939796@qq.com"},{"title":"rss","icon":"icon-rss","link":"/atom.xml"}]}],"Page":[{"title":"404","date":"2018-01-25T09:43:47.000Z","type":"error","layout":"error","_content":"","source":"404/index.md","raw":"---\ntitle: 404\ndate: 2018-01-25 09:43:47\ntype: error\nlayout: error\n---\n","updated":"2018-01-25T01:44:52.049Z","path":"404/index.html","comments":1,"_id":"cjdi72vi700019gr63bt49hnw","content":"","site":{"data":{"contact":[{"title":"github","icon":"icon-github","link":"https://github.com/successz"},{"title":"email","icon":"icon-email","link":"284939796@qq.com"},{"title":"rss","icon":"icon-rss","link":"/atom.xml"}]}},"excerpt":"","more":""},{"title":"search","date":"2018-01-25T09:20:38.000Z","type":"serach","layout":"search","_content":"\n","source":"search/index.md","raw":"---\ntitle: search\ndate: 2018-01-25 09:20:38\ntype: serach\nlayout: search\n---\n\n","updated":"2018-01-25T01:45:24.390Z","path":"search/index.html","comments":1,"_id":"cjdi72vig00039gr6xchro5cl","content":"","site":{"data":{"contact":[{"title":"github","icon":"icon-github","link":"https://github.com/successz"},{"title":"email","icon":"icon-email","link":"284939796@qq.com"},{"title":"rss","icon":"icon-rss","link":"/atom.xml"}]}},"excerpt":"","more":""},{"title":"about","date":"2018-01-25T09:15:23.000Z","type":"about","layout":"about","_content":"\n## 这家伙很懒，什么都没有写^ - ^\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-01-25 09:15:23\ntype: about\nlayout: about\n---\n\n## 这家伙很懒，什么都没有写^ - ^\n","updated":"2018-01-25T02:09:18.980Z","path":"about/index.html","comments":1,"_id":"cjdi72viu00079gr682f5rctk","content":"<h2 id=\"这家伙很懒，什么都没有写\"><a href=\"#这家伙很懒，什么都没有写\" class=\"headerlink\" title=\"这家伙很懒，什么都没有写^ - ^\"></a>这家伙很懒，什么都没有写^ - ^</h2>","site":{"data":{"contact":[{"title":"github","icon":"icon-github","link":"https://github.com/successz"},{"title":"email","icon":"icon-email","link":"284939796@qq.com"},{"title":"rss","icon":"icon-rss","link":"/atom.xml"}]}},"excerpt":"","more":"<h2 id=\"这家伙很懒，什么都没有写\"><a href=\"#这家伙很懒，什么都没有写\" class=\"headerlink\" title=\"这家伙很懒，什么都没有写^ - ^\"></a>这家伙很懒，什么都没有写^ - ^</h2>"}],"Post":[{"title":"hotcss","date":"2018-02-11T10:32:55.000Z","author":{"nick":"zmc","link":"https://www.zhoumengcheng.cn"},"cover":"https://images.zhoumengcheng.cn/hotcss.jpg","subtitle":"hotcss不是一个库，也不是一个框架。它是一个移动端布局开发解决方案。使用hotcss可以让移动端布局开发更容易","_content":"\n## hotcss\n*让移动端布局开发更加容易*\n\n\n网址：[点击进入](https://github.com/imochen/hotcss)\n\n### 用法\n\n```html\n<script src=\"/path/to/hotcss.js\"></script>\n```\n#### \\*hotcss.js必须在其他加载前加载，不能异步加载\n\n### css写法\n\n*推荐使用scss来编写css，在scss的头部使用`import`将`px2rem`导入*\n\n```js\n@import '/path/to/px2rem.scss'; \n```\n\n如果你的项目是单一尺寸，需要定义全局变量，在px2rem.scss文件中定义全局的`designWidth`;\n\n```js\n@function px2rem($px){\n    @return $px*320/$designWidth/20 + rem;\n} \n$designWidth: 750;\n```\n\n如果是多尺寸，需要在业务scss中单独定义：\n```js\n@import '/path/to/px2rem.scss';\n$designWidth: 750;\n```\n$designWidth必须要在使用px2rem前定义。否则scss编译会出错。\n\n注意：如果使用less，则需要引入less-plugin-functions，普通的less编译工具无法正常编译。\n\n\n更多参考：https://github.com/imochen/hotcss","source":"_posts/hotcss.md","raw":"---\ntitle: hotcss\ndate: 2018-02-11 10:32:55\ntags:\n  - js\ncategories:\n  - css\n  - js\nauthor: \n  nick: zmc\n  link: https://www.zhoumengcheng.cn\ncover: https://images.zhoumengcheng.cn/hotcss.jpg\nsubtitle: hotcss不是一个库，也不是一个框架。它是一个移动端布局开发解决方案。使用hotcss可以让移动端布局开发更容易\n---\n\n## hotcss\n*让移动端布局开发更加容易*\n\n\n网址：[点击进入](https://github.com/imochen/hotcss)\n\n### 用法\n\n```html\n<script src=\"/path/to/hotcss.js\"></script>\n```\n#### \\*hotcss.js必须在其他加载前加载，不能异步加载\n\n### css写法\n\n*推荐使用scss来编写css，在scss的头部使用`import`将`px2rem`导入*\n\n```js\n@import '/path/to/px2rem.scss'; \n```\n\n如果你的项目是单一尺寸，需要定义全局变量，在px2rem.scss文件中定义全局的`designWidth`;\n\n```js\n@function px2rem($px){\n    @return $px*320/$designWidth/20 + rem;\n} \n$designWidth: 750;\n```\n\n如果是多尺寸，需要在业务scss中单独定义：\n```js\n@import '/path/to/px2rem.scss';\n$designWidth: 750;\n```\n$designWidth必须要在使用px2rem前定义。否则scss编译会出错。\n\n注意：如果使用less，则需要引入less-plugin-functions，普通的less编译工具无法正常编译。\n\n\n更多参考：https://github.com/imochen/hotcss","slug":"hotcss","published":1,"updated":"2018-02-11T02:52:32.816Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdi72vhw00009gr6hhpk18ar","content":"<h2 id=\"hotcss\"><a href=\"#hotcss\" class=\"headerlink\" title=\"hotcss\"></a>hotcss</h2><p><em>让移动端布局开发更加容易</em></p>\n<p>网址：<a href=\"https://github.com/imochen/hotcss\" target=\"_blank\" rel=\"noopener\">点击进入</a></p>\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/path/to/hotcss.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"hotcss-js必须在其他加载前加载，不能异步加载\"><a href=\"#hotcss-js必须在其他加载前加载，不能异步加载\" class=\"headerlink\" title=\"*hotcss.js必须在其他加载前加载，不能异步加载\"></a>*hotcss.js必须在其他加载前加载，不能异步加载</h4><h3 id=\"css写法\"><a href=\"#css写法\" class=\"headerlink\" title=\"css写法\"></a>css写法</h3><p><em>推荐使用scss来编写css，在scss的头部使用<code>import</code>将<code>px2rem</code>导入</em></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">'/path/to/px2rem.scss'</span>;</span><br></pre></td></tr></table></figure>\n<p>如果你的项目是单一尺寸，需要定义全局变量，在px2rem.scss文件中定义全局的<code>designWidth</code>;</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">px2rem</span>(<span class=\"params\">$px</span>)</span>&#123;</span><br><span class=\"line\">    @<span class=\"keyword\">return</span> $px*<span class=\"number\">320</span>/$designWidth/<span class=\"number\">20</span> + rem;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\">$designWidth: <span class=\"number\">750</span>;</span><br></pre></td></tr></table></figure>\n<p>如果是多尺寸，需要在业务scss中单独定义：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">'/path/to/px2rem.scss'</span>;</span><br><span class=\"line\">$designWidth: <span class=\"number\">750</span>;</span><br></pre></td></tr></table></figure></p>\n<p>$designWidth必须要在使用px2rem前定义。否则scss编译会出错。</p>\n<p>注意：如果使用less，则需要引入less-plugin-functions，普通的less编译工具无法正常编译。</p>\n<p>更多参考：<a href=\"https://github.com/imochen/hotcss\" target=\"_blank\" rel=\"noopener\">https://github.com/imochen/hotcss</a></p>\n","site":{"data":{"contact":[{"title":"github","icon":"icon-github","link":"https://github.com/successz"},{"title":"email","icon":"icon-email","link":"284939796@qq.com"},{"title":"rss","icon":"icon-rss","link":"/atom.xml"}]}},"excerpt":"","more":"<h2 id=\"hotcss\"><a href=\"#hotcss\" class=\"headerlink\" title=\"hotcss\"></a>hotcss</h2><p><em>让移动端布局开发更加容易</em></p>\n<p>网址：<a href=\"https://github.com/imochen/hotcss\" target=\"_blank\" rel=\"noopener\">点击进入</a></p>\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/path/to/hotcss.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"hotcss-js必须在其他加载前加载，不能异步加载\"><a href=\"#hotcss-js必须在其他加载前加载，不能异步加载\" class=\"headerlink\" title=\"*hotcss.js必须在其他加载前加载，不能异步加载\"></a>*hotcss.js必须在其他加载前加载，不能异步加载</h4><h3 id=\"css写法\"><a href=\"#css写法\" class=\"headerlink\" title=\"css写法\"></a>css写法</h3><p><em>推荐使用scss来编写css，在scss的头部使用<code>import</code>将<code>px2rem</code>导入</em></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">'/path/to/px2rem.scss'</span>;</span><br></pre></td></tr></table></figure>\n<p>如果你的项目是单一尺寸，需要定义全局变量，在px2rem.scss文件中定义全局的<code>designWidth</code>;</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">px2rem</span>(<span class=\"params\">$px</span>)</span>&#123;</span><br><span class=\"line\">    @<span class=\"keyword\">return</span> $px*<span class=\"number\">320</span>/$designWidth/<span class=\"number\">20</span> + rem;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\">$designWidth: <span class=\"number\">750</span>;</span><br></pre></td></tr></table></figure>\n<p>如果是多尺寸，需要在业务scss中单独定义：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">'/path/to/px2rem.scss'</span>;</span><br><span class=\"line\">$designWidth: <span class=\"number\">750</span>;</span><br></pre></td></tr></table></figure></p>\n<p>$designWidth必须要在使用px2rem前定义。否则scss编译会出错。</p>\n<p>注意：如果使用less，则需要引入less-plugin-functions，普通的less编译工具无法正常编译。</p>\n<p>更多参考：<a href=\"https://github.com/imochen/hotcss\" target=\"_blank\" rel=\"noopener\">https://github.com/imochen/hotcss</a></p>\n"},{"title":"经常会用的CSS知识","date":"2018-02-06T10:26:23.000Z","author":{"nick":"zmc","link":"https://www.zhoumengcheng.cn"},"cover":"https://images.zhoumengcheng.cn/0180206103014.jpg","subtitle":"日常会用到的css小知识，记录一下！！！","_content":"\n### 常用meta标签\n```html\n<meta name=\"viewport\" content=\"width=device-width,user-scalable=0,,target-densitydpi=device-dpi\">\n<meta name=\"keywords\" content=\"\">\n<meta name=\"description\" content=\"\">\n```\n\n### 取消点击高亮背景\n```html\n<style>\n-webkit-tap-highlight-color: rgba(255,255,255,0);\n</style>\n```\n\n### css3动画在安卓手机上卡爆的问题\n*开启硬件加速*\n```html\n-webkit-backface-visibility: hidden;\n```\n\n### css实现垂直居中的几种方法\n\n> 表格方法\n\n```html\n<div class=\"box_center\">\n    <div class=\"inner\"></div>\n</div>\n.box_center {\n    display: table-cell;\n    width: 300px;\n    height: 300px;\n    text-align: center;\n    vertical-align: middle;\n}\n.box_center .inner {\n    display: inline-block;\n}\n```\n\n> 利用空元素占位实现\n\n```html\n<div class=\"box_center\">\n    <div class=\"placeholder\"></div>\n    <div class=\"inner\"></div>\n</div>\n\n.box_center {\n    width: 300px;\n    height: 300px;\n    text-align: center;\n    font-size:0;\n}\n.box_center .inner {\n    display: inline-block;\n    vertical-align: middle;\n}\n.box_center .placeholder {\n    display: inline-block;\n    width: 0;\n    height: 100%;\n    vertical-align: middle;\n}\n```\n\n> 绝对定位\n\n```html\n.Absolute-Center {  \n  margin: auto;  \n  position: absolute;  \n  top: 0; left: 0; bottom: 0; right: 0;  \n}  \n```","source":"_posts/css.md","raw":"---\ntitle: 经常会用的CSS知识\ndate: 2018-02-06 10:26:23\ntags:\n  - css\ncategories:\n  - css\nauthor:\n  nick: zmc\n  link: https://www.zhoumengcheng.cn\ncover: https://images.zhoumengcheng.cn/0180206103014.jpg\nsubtitle: 日常会用到的css小知识，记录一下！！！\n---\n\n### 常用meta标签\n```html\n<meta name=\"viewport\" content=\"width=device-width,user-scalable=0,,target-densitydpi=device-dpi\">\n<meta name=\"keywords\" content=\"\">\n<meta name=\"description\" content=\"\">\n```\n\n### 取消点击高亮背景\n```html\n<style>\n-webkit-tap-highlight-color: rgba(255,255,255,0);\n</style>\n```\n\n### css3动画在安卓手机上卡爆的问题\n*开启硬件加速*\n```html\n-webkit-backface-visibility: hidden;\n```\n\n### css实现垂直居中的几种方法\n\n> 表格方法\n\n```html\n<div class=\"box_center\">\n    <div class=\"inner\"></div>\n</div>\n.box_center {\n    display: table-cell;\n    width: 300px;\n    height: 300px;\n    text-align: center;\n    vertical-align: middle;\n}\n.box_center .inner {\n    display: inline-block;\n}\n```\n\n> 利用空元素占位实现\n\n```html\n<div class=\"box_center\">\n    <div class=\"placeholder\"></div>\n    <div class=\"inner\"></div>\n</div>\n\n.box_center {\n    width: 300px;\n    height: 300px;\n    text-align: center;\n    font-size:0;\n}\n.box_center .inner {\n    display: inline-block;\n    vertical-align: middle;\n}\n.box_center .placeholder {\n    display: inline-block;\n    width: 0;\n    height: 100%;\n    vertical-align: middle;\n}\n```\n\n> 绝对定位\n\n```html\n.Absolute-Center {  \n  margin: auto;  \n  position: absolute;  \n  top: 0; left: 0; bottom: 0; right: 0;  \n}  \n```","slug":"css","published":1,"updated":"2018-02-06T03:00:46.303Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdi72vic00029gr6643323yq","content":"<h3 id=\"常用meta标签\"><a href=\"#常用meta标签\" class=\"headerlink\" title=\"常用meta标签\"></a>常用meta标签</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width,user-scalable=0,,target-densitydpi=device-dpi\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"keywords\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"description\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"取消点击高亮背景\"><a href=\"#取消点击高亮背景\" class=\"headerlink\" title=\"取消点击高亮背景\"></a>取消点击高亮背景</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">-webkit-tap-highlight-color: rgba(255,255,255,0);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"css3动画在安卓手机上卡爆的问题\"><a href=\"#css3动画在安卓手机上卡爆的问题\" class=\"headerlink\" title=\"css3动画在安卓手机上卡爆的问题\"></a>css3动画在安卓手机上卡爆的问题</h3><p><em>开启硬件加速</em><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-webkit-backface-visibility: hidden;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"css实现垂直居中的几种方法\"><a href=\"#css实现垂直居中的几种方法\" class=\"headerlink\" title=\"css实现垂直居中的几种方法\"></a>css实现垂直居中的几种方法</h3><blockquote>\n<p>表格方法</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box_center\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"inner\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">.box_center &#123;</span><br><span class=\"line\">    display: table-cell;</span><br><span class=\"line\">    width: 300px;</span><br><span class=\"line\">    height: 300px;</span><br><span class=\"line\">    text-align: center;</span><br><span class=\"line\">    vertical-align: middle;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.box_center .inner &#123;</span><br><span class=\"line\">    display: inline-block;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>利用空元素占位实现</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box_center\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"placeholder\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"inner\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">.box_center &#123;</span><br><span class=\"line\">    width: 300px;</span><br><span class=\"line\">    height: 300px;</span><br><span class=\"line\">    text-align: center;</span><br><span class=\"line\">    font-size:0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.box_center .inner &#123;</span><br><span class=\"line\">    display: inline-block;</span><br><span class=\"line\">    vertical-align: middle;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.box_center .placeholder &#123;</span><br><span class=\"line\">    display: inline-block;</span><br><span class=\"line\">    width: 0;</span><br><span class=\"line\">    height: 100%;</span><br><span class=\"line\">    vertical-align: middle;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>绝对定位</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.Absolute-Center &#123;  </span><br><span class=\"line\">  margin: auto;  </span><br><span class=\"line\">  position: absolute;  </span><br><span class=\"line\">  top: 0; left: 0; bottom: 0; right: 0;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{"contact":[{"title":"github","icon":"icon-github","link":"https://github.com/successz"},{"title":"email","icon":"icon-email","link":"284939796@qq.com"},{"title":"rss","icon":"icon-rss","link":"/atom.xml"}]}},"excerpt":"","more":"<h3 id=\"常用meta标签\"><a href=\"#常用meta标签\" class=\"headerlink\" title=\"常用meta标签\"></a>常用meta标签</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width,user-scalable=0,,target-densitydpi=device-dpi\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"keywords\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"description\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"取消点击高亮背景\"><a href=\"#取消点击高亮背景\" class=\"headerlink\" title=\"取消点击高亮背景\"></a>取消点击高亮背景</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">-webkit-tap-highlight-color: rgba(255,255,255,0);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"css3动画在安卓手机上卡爆的问题\"><a href=\"#css3动画在安卓手机上卡爆的问题\" class=\"headerlink\" title=\"css3动画在安卓手机上卡爆的问题\"></a>css3动画在安卓手机上卡爆的问题</h3><p><em>开启硬件加速</em><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-webkit-backface-visibility: hidden;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"css实现垂直居中的几种方法\"><a href=\"#css实现垂直居中的几种方法\" class=\"headerlink\" title=\"css实现垂直居中的几种方法\"></a>css实现垂直居中的几种方法</h3><blockquote>\n<p>表格方法</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box_center\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"inner\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">.box_center &#123;</span><br><span class=\"line\">    display: table-cell;</span><br><span class=\"line\">    width: 300px;</span><br><span class=\"line\">    height: 300px;</span><br><span class=\"line\">    text-align: center;</span><br><span class=\"line\">    vertical-align: middle;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.box_center .inner &#123;</span><br><span class=\"line\">    display: inline-block;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>利用空元素占位实现</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box_center\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"placeholder\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"inner\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">.box_center &#123;</span><br><span class=\"line\">    width: 300px;</span><br><span class=\"line\">    height: 300px;</span><br><span class=\"line\">    text-align: center;</span><br><span class=\"line\">    font-size:0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.box_center .inner &#123;</span><br><span class=\"line\">    display: inline-block;</span><br><span class=\"line\">    vertical-align: middle;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.box_center .placeholder &#123;</span><br><span class=\"line\">    display: inline-block;</span><br><span class=\"line\">    width: 0;</span><br><span class=\"line\">    height: 100%;</span><br><span class=\"line\">    vertical-align: middle;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>绝对定位</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.Absolute-Center &#123;  </span><br><span class=\"line\">  margin: auto;  </span><br><span class=\"line\">  position: absolute;  </span><br><span class=\"line\">  top: 0; left: 0; bottom: 0; right: 0;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"linux下定时删除n天前的记录文件","date":"2018-02-06T08:57:27.000Z","author":{"nick":"zmc","link":"https://www.zhoumengcheng.cn"},"subtitle":"如何定时删除linux下n天前的记录文件","_content":"\n如何定时删除服务器上的临时文件，linux下有个crontab工具，用来执行定时任务；\n\n开启crontab服务： ``/sbin/service start crontab;``\n\n创建crontab定时任务：``crontab -e``或者创建 xxx.cron后缀文件然后使用：``crontab xxx.cron``\n\n### 删除文件写法：* * * * * find 要删除的目录路径 -mtime +天数 -name 文件名 -exec rm -rf {} \\;\n\n例如：* 6 * * * find /root/home/zhang ctime 1 -exec rm -rf {} \\;\n\n表示每天早上六点删除/root/home/zhang目录下一天前创建的所有文件，包括文件夹zhang\n\n第一个号表示时间中的分钟 取值：0-59；\n\n第二个号表示时间中的小时 取值：0-23；\n\n第三个号表示是一个月中的第几天，取值： 1-31；\n\n第四个号表示是一年中的第几个月，取值：1-12；\n\n第五个*号表示一个星期中的第几天，取值：0-7（0,7都表示星期天）\n","source":"_posts/timing.md","raw":"---\ntitle: linux下定时删除n天前的记录文件\ndate: 2018-02-06 08:57:27\ntags:\n  - linux\ncategories:\n  - linux文章\nauthor:\n  nick: zmc\n  link: https://www.zhoumengcheng.cn\nsubtitle: 如何定时删除linux下n天前的记录文件\n---\n\n如何定时删除服务器上的临时文件，linux下有个crontab工具，用来执行定时任务；\n\n开启crontab服务： ``/sbin/service start crontab;``\n\n创建crontab定时任务：``crontab -e``或者创建 xxx.cron后缀文件然后使用：``crontab xxx.cron``\n\n### 删除文件写法：* * * * * find 要删除的目录路径 -mtime +天数 -name 文件名 -exec rm -rf {} \\;\n\n例如：* 6 * * * find /root/home/zhang ctime 1 -exec rm -rf {} \\;\n\n表示每天早上六点删除/root/home/zhang目录下一天前创建的所有文件，包括文件夹zhang\n\n第一个号表示时间中的分钟 取值：0-59；\n\n第二个号表示时间中的小时 取值：0-23；\n\n第三个号表示是一个月中的第几天，取值： 1-31；\n\n第四个号表示是一年中的第几个月，取值：1-12；\n\n第五个*号表示一个星期中的第几天，取值：0-7（0,7都表示星期天）\n","slug":"timing","published":1,"updated":"2018-02-06T01:03:37.096Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdi72vir00069gr6buhwbw7k","content":"<p>如何定时删除服务器上的临时文件，linux下有个crontab工具，用来执行定时任务；</p>\n<p>开启crontab服务： <code>/sbin/service start crontab;</code></p>\n<p>创建crontab定时任务：<code>crontab -e</code>或者创建 xxx.cron后缀文件然后使用：<code>crontab xxx.cron</code></p>\n<h3 id=\"删除文件写法：-find-要删除的目录路径-mtime-天数-name-文件名-exec-rm-rf\"><a href=\"#删除文件写法：-find-要删除的目录路径-mtime-天数-name-文件名-exec-rm-rf\" class=\"headerlink\" title=\"删除文件写法：    * find 要删除的目录路径 -mtime +天数 -name 文件名 -exec rm -rf {} \\;\"></a>删除文件写法：<em> </em> <em> </em> * find 要删除的目录路径 -mtime +天数 -name 文件名 -exec rm -rf {} \\;</h3><p>例如：<em> 6 </em> <em> </em> find /root/home/zhang ctime 1 -exec rm -rf {} \\;</p>\n<p>表示每天早上六点删除/root/home/zhang目录下一天前创建的所有文件，包括文件夹zhang</p>\n<p>第一个号表示时间中的分钟 取值：0-59；</p>\n<p>第二个号表示时间中的小时 取值：0-23；</p>\n<p>第三个号表示是一个月中的第几天，取值： 1-31；</p>\n<p>第四个号表示是一年中的第几个月，取值：1-12；</p>\n<p>第五个*号表示一个星期中的第几天，取值：0-7（0,7都表示星期天）</p>\n","site":{"data":{"contact":[{"title":"github","icon":"icon-github","link":"https://github.com/successz"},{"title":"email","icon":"icon-email","link":"284939796@qq.com"},{"title":"rss","icon":"icon-rss","link":"/atom.xml"}]}},"excerpt":"","more":"<p>如何定时删除服务器上的临时文件，linux下有个crontab工具，用来执行定时任务；</p>\n<p>开启crontab服务： <code>/sbin/service start crontab;</code></p>\n<p>创建crontab定时任务：<code>crontab -e</code>或者创建 xxx.cron后缀文件然后使用：<code>crontab xxx.cron</code></p>\n<h3 id=\"删除文件写法：-find-要删除的目录路径-mtime-天数-name-文件名-exec-rm-rf\"><a href=\"#删除文件写法：-find-要删除的目录路径-mtime-天数-name-文件名-exec-rm-rf\" class=\"headerlink\" title=\"删除文件写法：    * find 要删除的目录路径 -mtime +天数 -name 文件名 -exec rm -rf {} \\;\"></a>删除文件写法：<em> </em> <em> </em> * find 要删除的目录路径 -mtime +天数 -name 文件名 -exec rm -rf {} \\;</h3><p>例如：<em> 6 </em> <em> </em> find /root/home/zhang ctime 1 -exec rm -rf {} \\;</p>\n<p>表示每天早上六点删除/root/home/zhang目录下一天前创建的所有文件，包括文件夹zhang</p>\n<p>第一个号表示时间中的分钟 取值：0-59；</p>\n<p>第二个号表示时间中的小时 取值：0-23；</p>\n<p>第三个号表示是一个月中的第几天，取值： 1-31；</p>\n<p>第四个号表示是一年中的第几个月，取值：1-12；</p>\n<p>第五个*号表示一个星期中的第几天，取值：0-7（0,7都表示星期天）</p>\n"},{"title":"js屏幕取词","date":"2018-02-06T10:36:57.000Z","author":{"nick":"zmc","link":"https://www.zhoumengcheng.cn"},"cover":"https://images.zhoumengcheng.cn/1548456.jpg","subtitle":"最近在了解关于富文本编辑器的资料时，看到有一个关于屏幕取词的内容","_content":"\n最近在了解关于富文本编辑器的资料时，看到有一个关于屏幕取词的内容\n\nIE9以下支持：`document.selection`\n\nIE9、Firefox、Safari、Chrome和Opera支持：`window.getSelection()`\n\n应用：\n\n>屏幕取词\n\n```js\nfunction getWord () {\n  var word = window.getSelection?window.getSelection():document.selection.createRange().text();\n  alert(word);\n}\ndocument.body.addEventListener('click', getWord, false);\n```\n\n>移除选中的内容\n\n```js\nfunction removeWord () {\n  window.getSelection?window.getSelection().removeAllRanges():document.selection.empty();\n}\ndocument.body.addEventListener('click', removeWord, false);\n```\n","source":"_posts/quci.md","raw":"---\ntitle: js屏幕取词\ndate: 2018-02-06 10:36:57\ntags:\n  - js\ncategories:\n  - js\nauthor:\n  nick: zmc\n  link: https://www.zhoumengcheng.cn\ncover: https://images.zhoumengcheng.cn/1548456.jpg\nsubtitle: 最近在了解关于富文本编辑器的资料时，看到有一个关于屏幕取词的内容\n---\n\n最近在了解关于富文本编辑器的资料时，看到有一个关于屏幕取词的内容\n\nIE9以下支持：`document.selection`\n\nIE9、Firefox、Safari、Chrome和Opera支持：`window.getSelection()`\n\n应用：\n\n>屏幕取词\n\n```js\nfunction getWord () {\n  var word = window.getSelection?window.getSelection():document.selection.createRange().text();\n  alert(word);\n}\ndocument.body.addEventListener('click', getWord, false);\n```\n\n>移除选中的内容\n\n```js\nfunction removeWord () {\n  window.getSelection?window.getSelection().removeAllRanges():document.selection.empty();\n}\ndocument.body.addEventListener('click', removeWord, false);\n```\n","slug":"quci","published":1,"updated":"2018-02-06T02:55:13.059Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdi72vix00089gr6ekzmxax9","content":"<p>最近在了解关于富文本编辑器的资料时，看到有一个关于屏幕取词的内容</p>\n<p>IE9以下支持：<code>document.selection</code></p>\n<p>IE9、Firefox、Safari、Chrome和Opera支持：<code>window.getSelection()</code></p>\n<p>应用：</p>\n<blockquote>\n<p>屏幕取词</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getWord</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> word = <span class=\"built_in\">window</span>.getSelection?<span class=\"built_in\">window</span>.getSelection():<span class=\"built_in\">document</span>.selection.createRange().text();</span><br><span class=\"line\">  alert(word);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.addEventListener(<span class=\"string\">'click'</span>, getWord, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>移除选中的内容</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">removeWord</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">window</span>.getSelection?<span class=\"built_in\">window</span>.getSelection().removeAllRanges():<span class=\"built_in\">document</span>.selection.empty();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.addEventListener(<span class=\"string\">'click'</span>, removeWord, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n","site":{"data":{"contact":[{"title":"github","icon":"icon-github","link":"https://github.com/successz"},{"title":"email","icon":"icon-email","link":"284939796@qq.com"},{"title":"rss","icon":"icon-rss","link":"/atom.xml"}]}},"excerpt":"","more":"<p>最近在了解关于富文本编辑器的资料时，看到有一个关于屏幕取词的内容</p>\n<p>IE9以下支持：<code>document.selection</code></p>\n<p>IE9、Firefox、Safari、Chrome和Opera支持：<code>window.getSelection()</code></p>\n<p>应用：</p>\n<blockquote>\n<p>屏幕取词</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getWord</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> word = <span class=\"built_in\">window</span>.getSelection?<span class=\"built_in\">window</span>.getSelection():<span class=\"built_in\">document</span>.selection.createRange().text();</span><br><span class=\"line\">  alert(word);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.addEventListener(<span class=\"string\">'click'</span>, getWord, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>移除选中的内容</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">removeWord</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">window</span>.getSelection?<span class=\"built_in\">window</span>.getSelection().removeAllRanges():<span class=\"built_in\">document</span>.selection.empty();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.addEventListener(<span class=\"string\">'click'</span>, removeWord, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n"},{"title":"https配置","date":"2018-02-05T15:22:59.000Z","author":{"nick":"zmc","link":"https://www.zhoumengcheng.cn"},"cover":"https://images.zhoumengcheng.cn/https.jpg","subtitle":"现在的人越来越重视数据保密和网络安全，但http协议有一个缺陷，它在传输过程中的数据包是明文的，这对于数据保密的操作来说，是致命的","_content":"\n> 现在的人越来越重视数据保密和网络安全，但http协议有一个缺陷，它在传输过程中的数据包是明文的，这对于数据保密的操作来说，是致命的。在这种情况下，很多网站开始使用https进行超文本传输。\n\nHTTPS： 简单来说是HTTP的安全版。即HTTP下加入SSL层。通俗的来说，https就是加密版的http。\n\n*https配置：*\n```bash\nserver_name  www.yuming.com;\nssl_protocols TLSv1.2 TLSv1.1 TLSv1;\nssl_certificate /etc/ssl/yourdomain.com.crt;   // 证书放置的位置\nssl_certificate_key /etc/ssl/yourdomain.com.key;  //同上\nssl_prefer_server_ciphers on;\n\n# 自动跳转https（可选）\nif ($server_port = 80) {\n    rewrite ^(.*)$ https://$host$1 permanent;\n}\n\n```\n\n","source":"_posts/https.md","raw":"---\ntitle: https配置\ndate: 2018-02-05 15:22:59\ncategories:\n  - html\ntags:\n  - https\n  - html\nauthor:\n  nick: zmc\n  link: https://www.zhoumengcheng.cn\ncover: https://images.zhoumengcheng.cn/https.jpg\nsubtitle: 现在的人越来越重视数据保密和网络安全，但http协议有一个缺陷，它在传输过程中的数据包是明文的，这对于数据保密的操作来说，是致命的\n---\n\n> 现在的人越来越重视数据保密和网络安全，但http协议有一个缺陷，它在传输过程中的数据包是明文的，这对于数据保密的操作来说，是致命的。在这种情况下，很多网站开始使用https进行超文本传输。\n\nHTTPS： 简单来说是HTTP的安全版。即HTTP下加入SSL层。通俗的来说，https就是加密版的http。\n\n*https配置：*\n```bash\nserver_name  www.yuming.com;\nssl_protocols TLSv1.2 TLSv1.1 TLSv1;\nssl_certificate /etc/ssl/yourdomain.com.crt;   // 证书放置的位置\nssl_certificate_key /etc/ssl/yourdomain.com.key;  //同上\nssl_prefer_server_ciphers on;\n\n# 自动跳转https（可选）\nif ($server_port = 80) {\n    rewrite ^(.*)$ https://$host$1 permanent;\n}\n\n```\n\n","slug":"https","published":1,"updated":"2018-02-06T03:02:26.126Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdi72vj100099gr6koi1amsz","content":"<blockquote>\n<p>现在的人越来越重视数据保密和网络安全，但http协议有一个缺陷，它在传输过程中的数据包是明文的，这对于数据保密的操作来说，是致命的。在这种情况下，很多网站开始使用https进行超文本传输。</p>\n</blockquote>\n<p>HTTPS： 简单来说是HTTP的安全版。即HTTP下加入SSL层。通俗的来说，https就是加密版的http。</p>\n<p><em>https配置：</em><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server_name  www.yuming.com;</span><br><span class=\"line\">ssl_protocols TLSv1.2 TLSv1.1 TLSv1;</span><br><span class=\"line\">ssl_certificate /etc/ssl/yourdomain.com.crt;   // 证书放置的位置</span><br><span class=\"line\">ssl_certificate_key /etc/ssl/yourdomain.com.key;  //同上</span><br><span class=\"line\">ssl_prefer_server_ciphers on;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 自动跳转https（可选）</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable\">$server_port</span> = 80) &#123;</span><br><span class=\"line\">    rewrite ^(.*)$ https://<span class=\"variable\">$host</span><span class=\"variable\">$1</span> permanent;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{"contact":[{"title":"github","icon":"icon-github","link":"https://github.com/successz"},{"title":"email","icon":"icon-email","link":"284939796@qq.com"},{"title":"rss","icon":"icon-rss","link":"/atom.xml"}]}},"excerpt":"","more":"<blockquote>\n<p>现在的人越来越重视数据保密和网络安全，但http协议有一个缺陷，它在传输过程中的数据包是明文的，这对于数据保密的操作来说，是致命的。在这种情况下，很多网站开始使用https进行超文本传输。</p>\n</blockquote>\n<p>HTTPS： 简单来说是HTTP的安全版。即HTTP下加入SSL层。通俗的来说，https就是加密版的http。</p>\n<p><em>https配置：</em><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server_name  www.yuming.com;</span><br><span class=\"line\">ssl_protocols TLSv1.2 TLSv1.1 TLSv1;</span><br><span class=\"line\">ssl_certificate /etc/ssl/yourdomain.com.crt;   // 证书放置的位置</span><br><span class=\"line\">ssl_certificate_key /etc/ssl/yourdomain.com.key;  //同上</span><br><span class=\"line\">ssl_prefer_server_ciphers on;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 自动跳转https（可选）</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable\">$server_port</span> = 80) &#123;</span><br><span class=\"line\">    rewrite ^(.*)$ https://<span class=\"variable\">$host</span><span class=\"variable\">$1</span> permanent;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"JS 取得一个区间的随机整数","date":"2018-02-06T11:59:36.000Z","author":{"nick":"zmc","link":"https://www.zhoumengcheng.cn"},"cover":"https://images.zhoumengcheng.cn/16551213.jpg","subtitle":"JS 取得一个区间的随机整数","_content":"\n> 生成随机数的公式\n\n```js\nfunction rand(n, m){\n        var random = Math.floor(Math.random()*(m-n+1)+n);\n        return random;\n}\n```\n\n> 如果你希望生成任意值到任意值（也就是指定范围内）的随机数\n\n```js\n// max - 期望的最大值 min - 期望的最小值\nMath.floor(Math.random()*(max-min+1)+min);\n```\n\n>生成[0,max]到任意数的随机数\n\n```js\n// max - 期望的最大值\nparseInt(Math.random()*(max+1),10);\nMath.floor(Math.random()*(max+1));\n```\n","source":"_posts/rander.md","raw":"---\ntitle: JS 取得一个区间的随机整数\ndate: 2018-02-06 11:59:36\ntags:\n  - js\ncategories:\n  - js\nauthor:\n  nick: zmc\n  link: https://www.zhoumengcheng.cn\ncover: https://images.zhoumengcheng.cn/16551213.jpg\nsubtitle: JS 取得一个区间的随机整数\n---\n\n> 生成随机数的公式\n\n```js\nfunction rand(n, m){\n        var random = Math.floor(Math.random()*(m-n+1)+n);\n        return random;\n}\n```\n\n> 如果你希望生成任意值到任意值（也就是指定范围内）的随机数\n\n```js\n// max - 期望的最大值 min - 期望的最小值\nMath.floor(Math.random()*(max-min+1)+min);\n```\n\n>生成[0,max]到任意数的随机数\n\n```js\n// max - 期望的最大值\nparseInt(Math.random()*(max+1),10);\nMath.floor(Math.random()*(max+1));\n```\n","slug":"rander","published":1,"updated":"2018-02-06T04:03:59.492Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdi72vj8000d9gr60ha4etoy","content":"<blockquote>\n<p>生成随机数的公式</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rand</span>(<span class=\"params\">n, m</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> random = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random()*(m-n+<span class=\"number\">1</span>)+n);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> random;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果你希望生成任意值到任意值（也就是指定范围内）的随机数</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// max - 期望的最大值 min - 期望的最小值</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random()*(max-min+<span class=\"number\">1</span>)+min);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>生成[0,max]到任意数的随机数</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// max - 期望的最大值</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"built_in\">Math</span>.random()*(max+<span class=\"number\">1</span>),<span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random()*(max+<span class=\"number\">1</span>));</span><br></pre></td></tr></table></figure>\n","site":{"data":{"contact":[{"title":"github","icon":"icon-github","link":"https://github.com/successz"},{"title":"email","icon":"icon-email","link":"284939796@qq.com"},{"title":"rss","icon":"icon-rss","link":"/atom.xml"}]}},"excerpt":"","more":"<blockquote>\n<p>生成随机数的公式</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rand</span>(<span class=\"params\">n, m</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> random = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random()*(m-n+<span class=\"number\">1</span>)+n);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> random;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果你希望生成任意值到任意值（也就是指定范围内）的随机数</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// max - 期望的最大值 min - 期望的最小值</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random()*(max-min+<span class=\"number\">1</span>)+min);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>生成[0,max]到任意数的随机数</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// max - 期望的最大值</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"built_in\">Math</span>.random()*(max+<span class=\"number\">1</span>),<span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random()*(max+<span class=\"number\">1</span>));</span><br></pre></td></tr></table></figure>\n"},{"title":"JS 中不容易分清的 slice,splice 和 split 三个函数","date":"2018-02-06T11:33:50.000Z","cover":"https://images.zhoumengcheng.cn/80206114439.jpg","author":{"nick":"zmc","link":"https://www.zhoumengcheng.cn"},"subtitle":"很多次见到这三个函数，都会有点搞不清楚，一定要查一下资料。做个笔记记录一下","_content":"\n很多次见到这三个函数，都会有点搞不清楚，一定要查一下资料。做个笔记记录一下：\n\n----------------------------------数组----------------------------------------------\n\n`slice`（数组）\n\n用法：\n\n```js\narray.slice(start, end);\n```\n解释：该方法是对数组部分截取，并返回一个数组副本；参数start是截取的开始数组索引，end参数等于你要取的最后一个字的位置值加上1（可选）；\n\n`splice`(数组)\n\n用法： \n```js\narray.aplice(start, deleteCount,item1,.....,itemX);\n```\n\n解释：splice方法从array中移除一个或多个数组，并用新的item替换他们。参数start是从数组array中移除元素的开始位置。参数deleteCount是要移除元素的个，如果设置为0，则不会删除项目。\n\n\n----------------------------------字符串---------------------------------------------\n\n`slice`（字符串）\n\n用法：\n```js\nstring.slice(start, end);\n```\n\n解释：slice方法复制string的一部分来构造一个新的字符串，用法与参数匀和数组的slice方法一样;end参数等于你要取的最后一个字符的位置值加上1\n\n`split`（字符串）\n\n用法：\n```js\nstring.split(separator,limit);\n```\n\n解释：split方法把这个string分割成片段来创建一个字符串数组。可选参数limit可以限制被分割的片段数量。separator参数可以是一个字符串或一个正则表达式。如果separator是一个空字符，会返回一个单字符的数组。","source":"_posts/slice.md","raw":"---\ntitle: JS 中不容易分清的 slice,splice 和 split 三个函数\ndate: 2018-02-06 11:33:50\ntags:\n  - js\ncategories:\n  - js\ncover: https://images.zhoumengcheng.cn/80206114439.jpg\nauthor:\n  nick: zmc\n  link: https://www.zhoumengcheng.cn\nsubtitle: 很多次见到这三个函数，都会有点搞不清楚，一定要查一下资料。做个笔记记录一下\n---\n\n很多次见到这三个函数，都会有点搞不清楚，一定要查一下资料。做个笔记记录一下：\n\n----------------------------------数组----------------------------------------------\n\n`slice`（数组）\n\n用法：\n\n```js\narray.slice(start, end);\n```\n解释：该方法是对数组部分截取，并返回一个数组副本；参数start是截取的开始数组索引，end参数等于你要取的最后一个字的位置值加上1（可选）；\n\n`splice`(数组)\n\n用法： \n```js\narray.aplice(start, deleteCount,item1,.....,itemX);\n```\n\n解释：splice方法从array中移除一个或多个数组，并用新的item替换他们。参数start是从数组array中移除元素的开始位置。参数deleteCount是要移除元素的个，如果设置为0，则不会删除项目。\n\n\n----------------------------------字符串---------------------------------------------\n\n`slice`（字符串）\n\n用法：\n```js\nstring.slice(start, end);\n```\n\n解释：slice方法复制string的一部分来构造一个新的字符串，用法与参数匀和数组的slice方法一样;end参数等于你要取的最后一个字符的位置值加上1\n\n`split`（字符串）\n\n用法：\n```js\nstring.split(separator,limit);\n```\n\n解释：split方法把这个string分割成片段来创建一个字符串数组。可选参数limit可以限制被分割的片段数量。separator参数可以是一个字符串或一个正则表达式。如果separator是一个空字符，会返回一个单字符的数组。","slug":"slice","published":1,"updated":"2018-02-06T06:15:33.902Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdi72vjd000f9gr6pjaveo4f","content":"<p>很多次见到这三个函数，都会有点搞不清楚，一定要查一下资料。做个笔记记录一下：</p>\n<p>———————————-数组———————————————-</p>\n<p><code>slice</code>（数组）</p>\n<p>用法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array.slice(start, end);</span><br></pre></td></tr></table></figure>\n<p>解释：该方法是对数组部分截取，并返回一个数组副本；参数start是截取的开始数组索引，end参数等于你要取的最后一个字的位置值加上1（可选）；</p>\n<p><code>splice</code>(数组)</p>\n<p>用法：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array.aplice(start, deleteCount,item1,.....,itemX);</span><br></pre></td></tr></table></figure></p>\n<p>解释：splice方法从array中移除一个或多个数组，并用新的item替换他们。参数start是从数组array中移除元素的开始位置。参数deleteCount是要移除元素的个，如果设置为0，则不会删除项目。</p>\n<p>———————————-字符串———————————————</p>\n<p><code>slice</code>（字符串）</p>\n<p>用法：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string.slice(start, end);</span><br></pre></td></tr></table></figure></p>\n<p>解释：slice方法复制string的一部分来构造一个新的字符串，用法与参数匀和数组的slice方法一样;end参数等于你要取的最后一个字符的位置值加上1</p>\n<p><code>split</code>（字符串）</p>\n<p>用法：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string.split(separator,limit);</span><br></pre></td></tr></table></figure></p>\n<p>解释：split方法把这个string分割成片段来创建一个字符串数组。可选参数limit可以限制被分割的片段数量。separator参数可以是一个字符串或一个正则表达式。如果separator是一个空字符，会返回一个单字符的数组。</p>\n","site":{"data":{"contact":[{"title":"github","icon":"icon-github","link":"https://github.com/successz"},{"title":"email","icon":"icon-email","link":"284939796@qq.com"},{"title":"rss","icon":"icon-rss","link":"/atom.xml"}]}},"excerpt":"","more":"<p>很多次见到这三个函数，都会有点搞不清楚，一定要查一下资料。做个笔记记录一下：</p>\n<p>———————————-数组———————————————-</p>\n<p><code>slice</code>（数组）</p>\n<p>用法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array.slice(start, end);</span><br></pre></td></tr></table></figure>\n<p>解释：该方法是对数组部分截取，并返回一个数组副本；参数start是截取的开始数组索引，end参数等于你要取的最后一个字的位置值加上1（可选）；</p>\n<p><code>splice</code>(数组)</p>\n<p>用法：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array.aplice(start, deleteCount,item1,.....,itemX);</span><br></pre></td></tr></table></figure></p>\n<p>解释：splice方法从array中移除一个或多个数组，并用新的item替换他们。参数start是从数组array中移除元素的开始位置。参数deleteCount是要移除元素的个，如果设置为0，则不会删除项目。</p>\n<p>———————————-字符串———————————————</p>\n<p><code>slice</code>（字符串）</p>\n<p>用法：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string.slice(start, end);</span><br></pre></td></tr></table></figure></p>\n<p>解释：slice方法复制string的一部分来构造一个新的字符串，用法与参数匀和数组的slice方法一样;end参数等于你要取的最后一个字符的位置值加上1</p>\n<p><code>split</code>（字符串）</p>\n<p>用法：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string.split(separator,limit);</span><br></pre></td></tr></table></figure></p>\n<p>解释：split方法把这个string分割成片段来创建一个字符串数组。可选参数limit可以限制被分割的片段数量。separator参数可以是一个字符串或一个正则表达式。如果separator是一个空字符，会返回一个单字符的数组。</p>\n"},{"title":"git命令详解","date":"2018-01-23T10:33:26.000Z","author":{"nick":"zmc","link":"https://www.zhoumengcheng.cn"},"cover":"https://images.zhoumengcheng.cn/timg.jpg","subtitle":"Git是目前世界上最先进的分布式版本控制系统（没有之一）。Git有什么特点？简单来说就是：高端大气上档次！","_content":"## git原理图\n\n![git原理图](https://images.zhoumengcheng.cn/bg2015120901.png)\n\n### **git与github绑定**\n\n```bash\n# 创建SSH KEY\n$ ssh-keygen -t rsa -C \"xxxxxx.@qq.com\"\n```\n在用户主目录找到.ssh目录，里面有``id_rsa``和``id_rsa.pub``,将``id_rsa.pub``的内容复制到github中\n登录github在设置里找到ssh key添加ssh key将``id_rsa.pub``的内容复制到这里来\n第一次可以使用``git push -u origin master``命令将本地仓库推送到master分支，还会把本地master分支和远程的master分支关联起来，以后的推送和拉取就可以简化命令。\n\n\n### 常用git命令\n\n```bash\n# 在当前目录新建一个Git代码库 \n$ git init\n\n# 新建一个目录，将其初始化\n$ git init [project]\n\n# 下载一个项目\n$ git clone [url]\n\n# 增加一个新的远程仓库，并命名\n$ git remote add git@github.com/xxxxx\n\n# 添加文件到暂存区\n$ git add .\n\n# 提交暂存区到仓库区\n$ git commit m \"说明\"\n\n# 显示有变更的文件\n$ git status\n\n# 推送当前分支到远程仓库\n$ git push origin master\n\n# 下载远程仓库，注意与pull的区别\n$ git fetch origin master:temp\n\n# 取回远程仓库，并与本地分支合并, 注意与fetch的区别\n$ git pull origin master\n\n# 删除暂存区或分支上的的文件，但本地又需要使用（--cached）,可以使用\n$ git rm --cached file_path\n\n```\n\n## **关于分支的命令**\n```bash\n# 列出所有本地分支\n$ git branch\n\n# 列出所有远程分支\n$ git branch -r\n\n# 列出所有本地分支和远程分支\n$ git branch -a \n\n# 新建一个分支\n$ git branch [branch-name]\n\n# 切换到指定分区，并更新工作区\n$ git checkout [branch-name]\n\n# 合并指定分支到当前分支，建议使用git rebase,注意与git merge的区别\n$ git rebase  [branch-name]\n\n# 删除分支\n$ git branch -d [branch-name]\n\n# 删除远程分支\n$ git push origin --delete [branch-name]\n\n```\n\n\n\n\n \n  ","source":"_posts/gitcmd.md","raw":"---\ntitle: git命令详解\ndate: 2018-01-23 10:33:26\ncategories:\n  - linux文章\ntags: \n  - git\n  - linux\nauthor:\n  nick: zmc\n  link: https://www.zhoumengcheng.cn\ncover: https://images.zhoumengcheng.cn/timg.jpg\nsubtitle: Git是目前世界上最先进的分布式版本控制系统（没有之一）。Git有什么特点？简单来说就是：高端大气上档次！\n---\n## git原理图\n\n![git原理图](https://images.zhoumengcheng.cn/bg2015120901.png)\n\n### **git与github绑定**\n\n```bash\n# 创建SSH KEY\n$ ssh-keygen -t rsa -C \"xxxxxx.@qq.com\"\n```\n在用户主目录找到.ssh目录，里面有``id_rsa``和``id_rsa.pub``,将``id_rsa.pub``的内容复制到github中\n登录github在设置里找到ssh key添加ssh key将``id_rsa.pub``的内容复制到这里来\n第一次可以使用``git push -u origin master``命令将本地仓库推送到master分支，还会把本地master分支和远程的master分支关联起来，以后的推送和拉取就可以简化命令。\n\n\n### 常用git命令\n\n```bash\n# 在当前目录新建一个Git代码库 \n$ git init\n\n# 新建一个目录，将其初始化\n$ git init [project]\n\n# 下载一个项目\n$ git clone [url]\n\n# 增加一个新的远程仓库，并命名\n$ git remote add git@github.com/xxxxx\n\n# 添加文件到暂存区\n$ git add .\n\n# 提交暂存区到仓库区\n$ git commit m \"说明\"\n\n# 显示有变更的文件\n$ git status\n\n# 推送当前分支到远程仓库\n$ git push origin master\n\n# 下载远程仓库，注意与pull的区别\n$ git fetch origin master:temp\n\n# 取回远程仓库，并与本地分支合并, 注意与fetch的区别\n$ git pull origin master\n\n# 删除暂存区或分支上的的文件，但本地又需要使用（--cached）,可以使用\n$ git rm --cached file_path\n\n```\n\n## **关于分支的命令**\n```bash\n# 列出所有本地分支\n$ git branch\n\n# 列出所有远程分支\n$ git branch -r\n\n# 列出所有本地分支和远程分支\n$ git branch -a \n\n# 新建一个分支\n$ git branch [branch-name]\n\n# 切换到指定分区，并更新工作区\n$ git checkout [branch-name]\n\n# 合并指定分支到当前分支，建议使用git rebase,注意与git merge的区别\n$ git rebase  [branch-name]\n\n# 删除分支\n$ git branch -d [branch-name]\n\n# 删除远程分支\n$ git push origin --delete [branch-name]\n\n```\n\n\n\n\n \n  ","slug":"gitcmd","published":1,"updated":"2018-04-12T00:54:23.463Z","_id":"cjdi72vkr00139gr6nuduolm8","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"git原理图\"><a href=\"#git原理图\" class=\"headerlink\" title=\"git原理图\"></a>git原理图</h2><p><img src=\"https://images.zhoumengcheng.cn/bg2015120901.png\" alt=\"git原理图\"></p>\n<h3 id=\"git与github绑定\"><a href=\"#git与github绑定\" class=\"headerlink\" title=\"git与github绑定\"></a><strong>git与github绑定</strong></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建SSH KEY</span></span><br><span class=\"line\">$ ssh-keygen -t rsa -C <span class=\"string\">\"xxxxxx.@qq.com\"</span></span><br></pre></td></tr></table></figure>\n<p>在用户主目录找到.ssh目录，里面有<code>id_rsa</code>和<code>id_rsa.pub</code>,将<code>id_rsa.pub</code>的内容复制到github中<br>登录github在设置里找到ssh key添加ssh key将<code>id_rsa.pub</code>的内容复制到这里来<br>第一次可以使用<code>git push -u origin master</code>命令将本地仓库推送到master分支，还会把本地master分支和远程的master分支关联起来，以后的推送和拉取就可以简化命令。</p>\n<h3 id=\"常用git命令\"><a href=\"#常用git命令\" class=\"headerlink\" title=\"常用git命令\"></a>常用git命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在当前目录新建一个Git代码库 </span></span><br><span class=\"line\">$ git init</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个目录，将其初始化</span></span><br><span class=\"line\">$ git init [project]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下载一个项目</span></span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> [url]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 增加一个新的远程仓库，并命名</span></span><br><span class=\"line\">$ git remote add git@github.com/xxxxx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加文件到暂存区</span></span><br><span class=\"line\">$ git add .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交暂存区到仓库区</span></span><br><span class=\"line\">$ git commit m <span class=\"string\">\"说明\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示有变更的文件</span></span><br><span class=\"line\">$ git status</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 推送当前分支到远程仓库</span></span><br><span class=\"line\">$ git push origin master</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下载远程仓库，注意与pull的区别</span></span><br><span class=\"line\">$ git fetch origin master:temp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 取回远程仓库，并与本地分支合并, 注意与fetch的区别</span></span><br><span class=\"line\">$ git pull origin master</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除暂存区或分支上的的文件，但本地又需要使用（--cached）,可以使用</span></span><br><span class=\"line\">$ git rm --cached file_path</span><br></pre></td></tr></table></figure>\n<h2 id=\"关于分支的命令\"><a href=\"#关于分支的命令\" class=\"headerlink\" title=\"关于分支的命令\"></a><strong>关于分支的命令</strong></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出所有本地分支</span></span><br><span class=\"line\">$ git branch</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出所有远程分支</span></span><br><span class=\"line\">$ git branch -r</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出所有本地分支和远程分支</span></span><br><span class=\"line\">$ git branch -a </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个分支</span></span><br><span class=\"line\">$ git branch [branch-name]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 切换到指定分区，并更新工作区</span></span><br><span class=\"line\">$ git checkout [branch-name]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 合并指定分支到当前分支，建议使用git rebase,注意与git merge的区别</span></span><br><span class=\"line\">$ git rebase  [branch-name]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除分支</span></span><br><span class=\"line\">$ git branch -d [branch-name]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除远程分支</span></span><br><span class=\"line\">$ git push origin --delete [branch-name]</span><br></pre></td></tr></table></figure>\n","site":{"data":{"contact":[{"title":"github","icon":"icon-github","link":"https://github.com/successz"},{"title":"email","icon":"icon-email","link":"284939796@qq.com"},{"title":"rss","icon":"icon-rss","link":"/atom.xml"}]}},"excerpt":"","more":"<h2 id=\"git原理图\"><a href=\"#git原理图\" class=\"headerlink\" title=\"git原理图\"></a>git原理图</h2><p><img src=\"https://images.zhoumengcheng.cn/bg2015120901.png\" alt=\"git原理图\"></p>\n<h3 id=\"git与github绑定\"><a href=\"#git与github绑定\" class=\"headerlink\" title=\"git与github绑定\"></a><strong>git与github绑定</strong></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建SSH KEY</span></span><br><span class=\"line\">$ ssh-keygen -t rsa -C <span class=\"string\">\"xxxxxx.@qq.com\"</span></span><br></pre></td></tr></table></figure>\n<p>在用户主目录找到.ssh目录，里面有<code>id_rsa</code>和<code>id_rsa.pub</code>,将<code>id_rsa.pub</code>的内容复制到github中<br>登录github在设置里找到ssh key添加ssh key将<code>id_rsa.pub</code>的内容复制到这里来<br>第一次可以使用<code>git push -u origin master</code>命令将本地仓库推送到master分支，还会把本地master分支和远程的master分支关联起来，以后的推送和拉取就可以简化命令。</p>\n<h3 id=\"常用git命令\"><a href=\"#常用git命令\" class=\"headerlink\" title=\"常用git命令\"></a>常用git命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在当前目录新建一个Git代码库 </span></span><br><span class=\"line\">$ git init</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个目录，将其初始化</span></span><br><span class=\"line\">$ git init [project]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下载一个项目</span></span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> [url]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 增加一个新的远程仓库，并命名</span></span><br><span class=\"line\">$ git remote add git@github.com/xxxxx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加文件到暂存区</span></span><br><span class=\"line\">$ git add .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交暂存区到仓库区</span></span><br><span class=\"line\">$ git commit m <span class=\"string\">\"说明\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示有变更的文件</span></span><br><span class=\"line\">$ git status</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 推送当前分支到远程仓库</span></span><br><span class=\"line\">$ git push origin master</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下载远程仓库，注意与pull的区别</span></span><br><span class=\"line\">$ git fetch origin master:temp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 取回远程仓库，并与本地分支合并, 注意与fetch的区别</span></span><br><span class=\"line\">$ git pull origin master</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除暂存区或分支上的的文件，但本地又需要使用（--cached）,可以使用</span></span><br><span class=\"line\">$ git rm --cached file_path</span><br></pre></td></tr></table></figure>\n<h2 id=\"关于分支的命令\"><a href=\"#关于分支的命令\" class=\"headerlink\" title=\"关于分支的命令\"></a><strong>关于分支的命令</strong></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出所有本地分支</span></span><br><span class=\"line\">$ git branch</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出所有远程分支</span></span><br><span class=\"line\">$ git branch -r</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出所有本地分支和远程分支</span></span><br><span class=\"line\">$ git branch -a </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个分支</span></span><br><span class=\"line\">$ git branch [branch-name]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 切换到指定分区，并更新工作区</span></span><br><span class=\"line\">$ git checkout [branch-name]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 合并指定分支到当前分支，建议使用git rebase,注意与git merge的区别</span></span><br><span class=\"line\">$ git rebase  [branch-name]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除分支</span></span><br><span class=\"line\">$ git branch -d [branch-name]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除远程分支</span></span><br><span class=\"line\">$ git push origin --delete [branch-name]</span><br></pre></td></tr></table></figure>\n"},{"title":"HTTP请求/响应报文结构","date":"2018-04-10T09:26:26.000Z","author":{"nick":"zmc","link":"https://www.zhoumengcheng.cn"},"cover":"https://images.zhoumengcheng.cn/timg223.jpg","subtitle":"http请求报文主要由请求行、请求头部、请求正文3部分组成","_content":"\n\n### http请求报文格式\n\nhttp请求报文主要由请求行、请求头部、请求正文3部分组成\n\n* 请求行\n\n请求行由3部分组成，分别为：请求方法字段、url字段和http协议版本字段3个字段组成,用空格隔开。\n例如，GET  /index.html/  HTTP/1.1\n\n* 请求头部\n\n请求头部为请求报文添加了一些附加信息，由“名/值”对组成，每行一对，名和值之间使用冒号分隔:\n\n请求头 | 说明\n---|---\nHost | 接受请求的服务器地址，可以是ip，端口号，或者域名\nUser-Agent | 发送请求的应用程序名称\nConnection | 指定与连接相关的属性，如Connection: Keep-Alive\nAccept-Charset | 通知服务端可以发送的编码格式\nAccept-Enconding | 通知服务端可以发送的数据压缩格式\nAccept-Language | 通知服务端可以发送的语言\n\n```js\n请求头部的最后会有一个空行，表示请求头部结束，接下来为请求正文，这一行非常重要，必不可少\n```\n\n* 请求正文\n请求正文就可以叫做请求数据，请求数据不在GET方法中使用，而是在post方法中使用。与请求数据相关的最常使用的请求头是Content-Type和Content-Length\n\n### http响应报文格式\n\nhttp响应也由三个部分组成，分别是：状态行、响应头部、响应正文3部分组成\n* 状态行\n\n由3部分组成，分别为：协议版本、状态码、状态码描述，之间由空格分隔\n状态码为3为数字，200~299的状态码表示成功，300~399的状态码表示资源重定向，400~499的状态码表示客户端请求出错，500~599的状态码表示服务端出错\n列举常见的\n\n状态码 | 说明\n--- | ---\n200 | 响应成功\n302 | 重定向（暂时性转移）\n400 | 客户端请求语法有错误，不能被服务器识别\n403 | 服务器接收到请求，但是拒绝提供服务（认证失败）\n404 | 请求资源不存在\n500 | 服务器内部错误\n\n* 响应头部\n\n与请求头部类似，为响应报文添加了一些附加信息\n\n常见响应头部如下\n\n响应头 | 说明\n--- | ---\nServer | 服务器应用程序软件的名称和版本\nContent-type | 响应正文的类型（是图片还是二进制类型）\nContent-length | 响应正文的长度\nContent-Charsrt | 响应正文使用的编码\nContent-Enconding | 响应正文使用的数据压缩格式\nContent-Language | 响应正文的语言\n\n与请求一样，会有空行\n\n* 响应正文\n\n服务器返回给客户端的文本信息\n\n","source":"_posts/http.md","raw":"---\ntitle: HTTP请求/响应报文结构\ndate: 2018-4-10  9:26:26\ntags:\n  - http\ncategories:\n  - http\nauthor:\n  nick: zmc\n  link: https://www.zhoumengcheng.cn\ncover: https://images.zhoumengcheng.cn/timg223.jpg\nsubtitle: http请求报文主要由请求行、请求头部、请求正文3部分组成\n---\n\n\n### http请求报文格式\n\nhttp请求报文主要由请求行、请求头部、请求正文3部分组成\n\n* 请求行\n\n请求行由3部分组成，分别为：请求方法字段、url字段和http协议版本字段3个字段组成,用空格隔开。\n例如，GET  /index.html/  HTTP/1.1\n\n* 请求头部\n\n请求头部为请求报文添加了一些附加信息，由“名/值”对组成，每行一对，名和值之间使用冒号分隔:\n\n请求头 | 说明\n---|---\nHost | 接受请求的服务器地址，可以是ip，端口号，或者域名\nUser-Agent | 发送请求的应用程序名称\nConnection | 指定与连接相关的属性，如Connection: Keep-Alive\nAccept-Charset | 通知服务端可以发送的编码格式\nAccept-Enconding | 通知服务端可以发送的数据压缩格式\nAccept-Language | 通知服务端可以发送的语言\n\n```js\n请求头部的最后会有一个空行，表示请求头部结束，接下来为请求正文，这一行非常重要，必不可少\n```\n\n* 请求正文\n请求正文就可以叫做请求数据，请求数据不在GET方法中使用，而是在post方法中使用。与请求数据相关的最常使用的请求头是Content-Type和Content-Length\n\n### http响应报文格式\n\nhttp响应也由三个部分组成，分别是：状态行、响应头部、响应正文3部分组成\n* 状态行\n\n由3部分组成，分别为：协议版本、状态码、状态码描述，之间由空格分隔\n状态码为3为数字，200~299的状态码表示成功，300~399的状态码表示资源重定向，400~499的状态码表示客户端请求出错，500~599的状态码表示服务端出错\n列举常见的\n\n状态码 | 说明\n--- | ---\n200 | 响应成功\n302 | 重定向（暂时性转移）\n400 | 客户端请求语法有错误，不能被服务器识别\n403 | 服务器接收到请求，但是拒绝提供服务（认证失败）\n404 | 请求资源不存在\n500 | 服务器内部错误\n\n* 响应头部\n\n与请求头部类似，为响应报文添加了一些附加信息\n\n常见响应头部如下\n\n响应头 | 说明\n--- | ---\nServer | 服务器应用程序软件的名称和版本\nContent-type | 响应正文的类型（是图片还是二进制类型）\nContent-length | 响应正文的长度\nContent-Charsrt | 响应正文使用的编码\nContent-Enconding | 响应正文使用的数据压缩格式\nContent-Language | 响应正文的语言\n\n与请求一样，会有空行\n\n* 响应正文\n\n服务器返回给客户端的文本信息\n\n","slug":"http","published":1,"updated":"2018-04-11T11:40:40.134Z","_id":"cjfv0h95w0000f8r61h5ujybi","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"http请求报文格式\"><a href=\"#http请求报文格式\" class=\"headerlink\" title=\"http请求报文格式\"></a>http请求报文格式</h3><p>http请求报文主要由请求行、请求头部、请求正文3部分组成</p>\n<ul>\n<li>请求行</li>\n</ul>\n<p>请求行由3部分组成，分别为：请求方法字段、url字段和http协议版本字段3个字段组成,用空格隔开。<br>例如，GET  /index.html/  HTTP/1.1</p>\n<ul>\n<li>请求头部</li>\n</ul>\n<p>请求头部为请求报文添加了一些附加信息，由“名/值”对组成，每行一对，名和值之间使用冒号分隔:</p>\n<table>\n<thead>\n<tr>\n<th>请求头</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Host</td>\n<td>接受请求的服务器地址，可以是ip，端口号，或者域名</td>\n</tr>\n<tr>\n<td>User-Agent</td>\n<td>发送请求的应用程序名称</td>\n</tr>\n<tr>\n<td>Connection</td>\n<td>指定与连接相关的属性，如Connection: Keep-Alive</td>\n</tr>\n<tr>\n<td>Accept-Charset</td>\n<td>通知服务端可以发送的编码格式</td>\n</tr>\n<tr>\n<td>Accept-Enconding</td>\n<td>通知服务端可以发送的数据压缩格式</td>\n</tr>\n<tr>\n<td>Accept-Language</td>\n<td>通知服务端可以发送的语言</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">请求头部的最后会有一个空行，表示请求头部结束，接下来为请求正文，这一行非常重要，必不可少</span><br></pre></td></tr></table></figure>\n<ul>\n<li>请求正文<br>请求正文就可以叫做请求数据，请求数据不在GET方法中使用，而是在post方法中使用。与请求数据相关的最常使用的请求头是Content-Type和Content-Length</li>\n</ul>\n<h3 id=\"http响应报文格式\"><a href=\"#http响应报文格式\" class=\"headerlink\" title=\"http响应报文格式\"></a>http响应报文格式</h3><p>http响应也由三个部分组成，分别是：状态行、响应头部、响应正文3部分组成</p>\n<ul>\n<li>状态行</li>\n</ul>\n<p>由3部分组成，分别为：协议版本、状态码、状态码描述，之间由空格分隔<br>状态码为3为数字，200~299的状态码表示成功，300~399的状态码表示资源重定向，400~499的状态码表示客户端请求出错，500~599的状态码表示服务端出错<br>列举常见的</p>\n<table>\n<thead>\n<tr>\n<th>状态码</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>200</td>\n<td>响应成功</td>\n</tr>\n<tr>\n<td>302</td>\n<td>重定向（暂时性转移）</td>\n</tr>\n<tr>\n<td>400</td>\n<td>客户端请求语法有错误，不能被服务器识别</td>\n</tr>\n<tr>\n<td>403</td>\n<td>服务器接收到请求，但是拒绝提供服务（认证失败）</td>\n</tr>\n<tr>\n<td>404</td>\n<td>请求资源不存在</td>\n</tr>\n<tr>\n<td>500</td>\n<td>服务器内部错误</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>响应头部</li>\n</ul>\n<p>与请求头部类似，为响应报文添加了一些附加信息</p>\n<p>常见响应头部如下</p>\n<table>\n<thead>\n<tr>\n<th>响应头</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Server</td>\n<td>服务器应用程序软件的名称和版本</td>\n</tr>\n<tr>\n<td>Content-type</td>\n<td>响应正文的类型（是图片还是二进制类型）</td>\n</tr>\n<tr>\n<td>Content-length</td>\n<td>响应正文的长度</td>\n</tr>\n<tr>\n<td>Content-Charsrt</td>\n<td>响应正文使用的编码</td>\n</tr>\n<tr>\n<td>Content-Enconding</td>\n<td>响应正文使用的数据压缩格式</td>\n</tr>\n<tr>\n<td>Content-Language</td>\n<td>响应正文的语言</td>\n</tr>\n</tbody>\n</table>\n<p>与请求一样，会有空行</p>\n<ul>\n<li>响应正文</li>\n</ul>\n<p>服务器返回给客户端的文本信息</p>\n","site":{"data":{"contact":[{"title":"github","icon":"icon-github","link":"https://github.com/successz"},{"title":"email","icon":"icon-email","link":"284939796@qq.com"},{"title":"rss","icon":"icon-rss","link":"/atom.xml"}]}},"excerpt":"","more":"<h3 id=\"http请求报文格式\"><a href=\"#http请求报文格式\" class=\"headerlink\" title=\"http请求报文格式\"></a>http请求报文格式</h3><p>http请求报文主要由请求行、请求头部、请求正文3部分组成</p>\n<ul>\n<li>请求行</li>\n</ul>\n<p>请求行由3部分组成，分别为：请求方法字段、url字段和http协议版本字段3个字段组成,用空格隔开。<br>例如，GET  /index.html/  HTTP/1.1</p>\n<ul>\n<li>请求头部</li>\n</ul>\n<p>请求头部为请求报文添加了一些附加信息，由“名/值”对组成，每行一对，名和值之间使用冒号分隔:</p>\n<table>\n<thead>\n<tr>\n<th>请求头</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Host</td>\n<td>接受请求的服务器地址，可以是ip，端口号，或者域名</td>\n</tr>\n<tr>\n<td>User-Agent</td>\n<td>发送请求的应用程序名称</td>\n</tr>\n<tr>\n<td>Connection</td>\n<td>指定与连接相关的属性，如Connection: Keep-Alive</td>\n</tr>\n<tr>\n<td>Accept-Charset</td>\n<td>通知服务端可以发送的编码格式</td>\n</tr>\n<tr>\n<td>Accept-Enconding</td>\n<td>通知服务端可以发送的数据压缩格式</td>\n</tr>\n<tr>\n<td>Accept-Language</td>\n<td>通知服务端可以发送的语言</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">请求头部的最后会有一个空行，表示请求头部结束，接下来为请求正文，这一行非常重要，必不可少</span><br></pre></td></tr></table></figure>\n<ul>\n<li>请求正文<br>请求正文就可以叫做请求数据，请求数据不在GET方法中使用，而是在post方法中使用。与请求数据相关的最常使用的请求头是Content-Type和Content-Length</li>\n</ul>\n<h3 id=\"http响应报文格式\"><a href=\"#http响应报文格式\" class=\"headerlink\" title=\"http响应报文格式\"></a>http响应报文格式</h3><p>http响应也由三个部分组成，分别是：状态行、响应头部、响应正文3部分组成</p>\n<ul>\n<li>状态行</li>\n</ul>\n<p>由3部分组成，分别为：协议版本、状态码、状态码描述，之间由空格分隔<br>状态码为3为数字，200~299的状态码表示成功，300~399的状态码表示资源重定向，400~499的状态码表示客户端请求出错，500~599的状态码表示服务端出错<br>列举常见的</p>\n<table>\n<thead>\n<tr>\n<th>状态码</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>200</td>\n<td>响应成功</td>\n</tr>\n<tr>\n<td>302</td>\n<td>重定向（暂时性转移）</td>\n</tr>\n<tr>\n<td>400</td>\n<td>客户端请求语法有错误，不能被服务器识别</td>\n</tr>\n<tr>\n<td>403</td>\n<td>服务器接收到请求，但是拒绝提供服务（认证失败）</td>\n</tr>\n<tr>\n<td>404</td>\n<td>请求资源不存在</td>\n</tr>\n<tr>\n<td>500</td>\n<td>服务器内部错误</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>响应头部</li>\n</ul>\n<p>与请求头部类似，为响应报文添加了一些附加信息</p>\n<p>常见响应头部如下</p>\n<table>\n<thead>\n<tr>\n<th>响应头</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Server</td>\n<td>服务器应用程序软件的名称和版本</td>\n</tr>\n<tr>\n<td>Content-type</td>\n<td>响应正文的类型（是图片还是二进制类型）</td>\n</tr>\n<tr>\n<td>Content-length</td>\n<td>响应正文的长度</td>\n</tr>\n<tr>\n<td>Content-Charsrt</td>\n<td>响应正文使用的编码</td>\n</tr>\n<tr>\n<td>Content-Enconding</td>\n<td>响应正文使用的数据压缩格式</td>\n</tr>\n<tr>\n<td>Content-Language</td>\n<td>响应正文的语言</td>\n</tr>\n</tbody>\n</table>\n<p>与请求一样，会有空行</p>\n<ul>\n<li>响应正文</li>\n</ul>\n<p>服务器返回给客户端的文本信息</p>\n"},{"title":"前端开发之es6新特性","date":"2018-04-10T10:22:58.000Z","anthor":{"nick":"zmc","link":"https://www.zhoumengcheng.cn"},"cover":"https://images.zhoumengcheng.cn/es6.jpg","subtitle":"随着h5的流行，es6也已经成为现在前端开发必须掌握的知识，讲解一下es6的一些新特性","_content":"\n> 随着h5和移动端的热门，es6已经成为前端开发是必须要掌握的知识，使用es6开发，就是让人撸的舒服。语法清晰，便于阅读理解，开发效率高，少去很多重复的操作。下面来看看有哪些常用新的特性。\n\n* ==新增块级作用域==\n\n作用：防止变量在会计作用域外被访问\n\n* ==let 和 const 关键字==\n\n作用： 防止变量重复声明，重复声明会报错\n\n* ==箭头函数==\n\n```js\n(a,b,c) => {\n    // 函数声明\n}\n\n// 当参数只有一个时，圆括号是可选的\n\n(a) => { \n // 函数声明\n}\n\na => {\n  // 函数声明\n}\n*两个效果是一样的*\n\n// 没有参数时应该写圆括号\n\n() => {\n    // 函数声明\n}\n\n```\n\n* ==解构赋值==\n\n> 解构赋值是一个javascript表达式，可以将值从数组或者属性从对象提取到不同的变量中\n\n```js\n// 解构数组\nvar foo = ['one', 'two', 'three'];\nvar [one,two,three] = foo;\n\n// 解构对象\nvar o = {p:42, q:true};\nvar {p,q} = o;\n\n// 注意对象的变量声明要跟对象的属性一样\n\n```\n\n* ==展开运算符 ...==\n\n> 三个点(...)在es6中，有两个含义：\n\n1-用在形参中，表示传递给他的参数集合，类似于arguments，叫不定参数，语法格式：在形参面前加三个点(...)\n\n```js\n// 一个函数只能出现一个不定参数，不定参数只能放在最后面\nfunction add(...args){\n  // console.log(args[0]);  \n}\n```\n\n2-用在数组面前，可以把数组的值全部打散，展开，叫展开运算符,语法格式:在数组面前加三个点（...）\n\n```js\nvar arr = [1,2,3,4];\nconsole.log(...arr);\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/es6.md","raw":"---\ntitle: 前端开发之es6新特性\ndate: 2018-4-10 10:22:58\ntags:\n  - js\ncategories:\n  - js\nanthor:\n  nick: zmc\n  link: https://www.zhoumengcheng.cn\ncover: https://images.zhoumengcheng.cn/es6.jpg\nsubtitle: 随着h5的流行，es6也已经成为现在前端开发必须掌握的知识，讲解一下es6的一些新特性\n---\n\n> 随着h5和移动端的热门，es6已经成为前端开发是必须要掌握的知识，使用es6开发，就是让人撸的舒服。语法清晰，便于阅读理解，开发效率高，少去很多重复的操作。下面来看看有哪些常用新的特性。\n\n* ==新增块级作用域==\n\n作用：防止变量在会计作用域外被访问\n\n* ==let 和 const 关键字==\n\n作用： 防止变量重复声明，重复声明会报错\n\n* ==箭头函数==\n\n```js\n(a,b,c) => {\n    // 函数声明\n}\n\n// 当参数只有一个时，圆括号是可选的\n\n(a) => { \n // 函数声明\n}\n\na => {\n  // 函数声明\n}\n*两个效果是一样的*\n\n// 没有参数时应该写圆括号\n\n() => {\n    // 函数声明\n}\n\n```\n\n* ==解构赋值==\n\n> 解构赋值是一个javascript表达式，可以将值从数组或者属性从对象提取到不同的变量中\n\n```js\n// 解构数组\nvar foo = ['one', 'two', 'three'];\nvar [one,two,three] = foo;\n\n// 解构对象\nvar o = {p:42, q:true};\nvar {p,q} = o;\n\n// 注意对象的变量声明要跟对象的属性一样\n\n```\n\n* ==展开运算符 ...==\n\n> 三个点(...)在es6中，有两个含义：\n\n1-用在形参中，表示传递给他的参数集合，类似于arguments，叫不定参数，语法格式：在形参面前加三个点(...)\n\n```js\n// 一个函数只能出现一个不定参数，不定参数只能放在最后面\nfunction add(...args){\n  // console.log(args[0]);  \n}\n```\n\n2-用在数组面前，可以把数组的值全部打散，展开，叫展开运算符,语法格式:在数组面前加三个点（...）\n\n```js\nvar arr = [1,2,3,4];\nconsole.log(...arr);\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"es6","published":1,"updated":"2018-04-27T06:56:27.941Z","_id":"cjfwe7o1t0000asr681bx4y4c","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>随着h5和移动端的热门，es6已经成为前端开发是必须要掌握的知识，使用es6开发，就是让人撸的舒服。语法清晰，便于阅读理解，开发效率高，少去很多重复的操作。下面来看看有哪些常用新的特性。</p>\n</blockquote>\n<ul>\n<li>==新增块级作用域==</li>\n</ul>\n<p>作用：防止变量在会计作用域外被访问</p>\n<ul>\n<li>==let 和 const 关键字==</li>\n</ul>\n<p>作用： 防止变量重复声明，重复声明会报错</p>\n<ul>\n<li>==箭头函数==</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(a,b,c) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 函数声明</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 当参数只有一个时，圆括号是可选的</span></span><br><span class=\"line\"></span><br><span class=\"line\">(a) =&gt; &#123; </span><br><span class=\"line\"> <span class=\"comment\">// 函数声明</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">a =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 函数声明</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">*两个效果是一样的*</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 没有参数时应该写圆括号</span></span><br><span class=\"line\"></span><br><span class=\"line\">() =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 函数声明</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>==解构赋值==</li>\n</ul>\n<blockquote>\n<p>解构赋值是一个javascript表达式，可以将值从数组或者属性从对象提取到不同的变量中</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 解构数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = [<span class=\"string\">'one'</span>, <span class=\"string\">'two'</span>, <span class=\"string\">'three'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> [one,two,three] = foo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解构对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;<span class=\"attr\">p</span>:<span class=\"number\">42</span>, <span class=\"attr\">q</span>:<span class=\"literal\">true</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123;p,q&#125; = o;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注意对象的变量声明要跟对象的属性一样</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>==展开运算符 …==</li>\n</ul>\n<blockquote>\n<p>三个点(…)在es6中，有两个含义：</p>\n</blockquote>\n<p>1-用在形参中，表示传递给他的参数集合，类似于arguments，叫不定参数，语法格式：在形参面前加三个点(…)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 一个函数只能出现一个不定参数，不定参数只能放在最后面</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">...args</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// console.log(args[0]);  </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2-用在数组面前，可以把数组的值全部打散，展开，叫展开运算符,语法格式:在数组面前加三个点（…）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(...arr);</span><br></pre></td></tr></table></figure>\n","site":{"data":{"contact":[{"title":"github","icon":"icon-github","link":"https://github.com/successz"},{"title":"email","icon":"icon-email","link":"284939796@qq.com"},{"title":"rss","icon":"icon-rss","link":"/atom.xml"}]}},"excerpt":"","more":"<blockquote>\n<p>随着h5和移动端的热门，es6已经成为前端开发是必须要掌握的知识，使用es6开发，就是让人撸的舒服。语法清晰，便于阅读理解，开发效率高，少去很多重复的操作。下面来看看有哪些常用新的特性。</p>\n</blockquote>\n<ul>\n<li>==新增块级作用域==</li>\n</ul>\n<p>作用：防止变量在会计作用域外被访问</p>\n<ul>\n<li>==let 和 const 关键字==</li>\n</ul>\n<p>作用： 防止变量重复声明，重复声明会报错</p>\n<ul>\n<li>==箭头函数==</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(a,b,c) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 函数声明</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 当参数只有一个时，圆括号是可选的</span></span><br><span class=\"line\"></span><br><span class=\"line\">(a) =&gt; &#123; </span><br><span class=\"line\"> <span class=\"comment\">// 函数声明</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">a =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 函数声明</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">*两个效果是一样的*</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 没有参数时应该写圆括号</span></span><br><span class=\"line\"></span><br><span class=\"line\">() =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 函数声明</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>==解构赋值==</li>\n</ul>\n<blockquote>\n<p>解构赋值是一个javascript表达式，可以将值从数组或者属性从对象提取到不同的变量中</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 解构数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = [<span class=\"string\">'one'</span>, <span class=\"string\">'two'</span>, <span class=\"string\">'three'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> [one,two,three] = foo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解构对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;<span class=\"attr\">p</span>:<span class=\"number\">42</span>, <span class=\"attr\">q</span>:<span class=\"literal\">true</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123;p,q&#125; = o;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注意对象的变量声明要跟对象的属性一样</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>==展开运算符 …==</li>\n</ul>\n<blockquote>\n<p>三个点(…)在es6中，有两个含义：</p>\n</blockquote>\n<p>1-用在形参中，表示传递给他的参数集合，类似于arguments，叫不定参数，语法格式：在形参面前加三个点(…)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 一个函数只能出现一个不定参数，不定参数只能放在最后面</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">...args</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// console.log(args[0]);  </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2-用在数组面前，可以把数组的值全部打散，展开，叫展开运算符,语法格式:在数组面前加三个点（…）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(...arr);</span><br></pre></td></tr></table></figure>\n"},{"title":"获取元素的最终 background-color","date":"2018-03-21T20:16:36.000Z","categorise":["js"],"author":{"nick":"zmc","link":"https://www.zhoumengcheng.cn"},"cover":"https://images.zhoumengcheng.cn/jsript.jpg","subtitle":"对网页进行调试的过程中，经常会用到js来获取元素的CSS样式，方法有很多很多","_content":"\nJS中使用document.defaultView.getComputedStyle()、currentStyle()方法获取CSS属性值\n在对网页进行调试的过程中，经常会用到js来获取元素的CSS样式，方法有很多很多,总结如下：\n\n1. obj.style：这个方法只能JS只能获取写在html标签中的写在style属性中的值（style=”…”），而无法获取定义在`<style type=\"text/css\">`里面的属性。\n\n```html\n<html xmlns=”http://www.w3.org/1999/xhtml“> \n<head> \n<meta http-equiv=”Content-Type” content=”text/html; charset=utf-8″ /> \n<title>JS获取CSS属性值</title> \n<style type=”text/css”> \n<!– \n.ss{color:#cdcdcd;} \n–> \n</style> \n</head> \n\n<body> \n<div id=”css88″ class=”ss” style=”width:200px; height:200px; background:#333333″>JS获取CSS属性值</div> \n<script type=”text/javascript”> \nalert(document.getElementById(“css88″).style.width);//200px \nalert(document.getElementById(“css88″).style.color);//空白 \n</script> \n</body> \n</html>\n```\n\n2. IE中使用的是obj.currentStyle方法，而FF是用的是getComputedStyle 方法 \n\n“DOM2级样式”增强了document.defaultView，提供了getComputedStyle()方法。这个方法接受两个参数：要取得计算样式的元素和一个伪元素字符串（例如“:after”）。如果不需要伪元素信息，第二个参数可以是null。getComputerStyle()方法返回一个CSSStyleDeclaration对象，其中包含当前元素的所有计算的样式。\n\n其语法为：document.defaultView.getComputedStyle('元素', '伪类')；\n\n以下面的HTML页面为例：\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>计算元素样式</title>\n<style>\n#myDiv {\nbackground-color:blue;\nwidth:100px;\nheight:200px;\n}\n</style>\n</head>\n<body>\n<div id =\"myDiv\" style=\"background-color:red; border:1px solid black\"></div>\n<script>\nvar myDiv = document.getElementById(\"myDiv\");\nvar computedStyle = document.defaultView.getComputedStyle(myDiv, null);\nalert(computedStyle.backgroundColor); //\"red\"\n</script>\n</body>\n</html>\n```\n\n边框属性可能也不会返回样式表中实际的border规则（Opera会返回，但其它浏览器不会）。存在这个差别的原因是不同浏览器解释综合属性的方式不同，因为设置这种属性实际上会涉及很多其他的属性。在设置border时，实际上是设置了四个边的边框宽度、颜色、样式属性。因此，即使computedStyle.border不会在所有浏览器中都返回值，但computedStyle.borderLeftWidth则会返回值。 \n\n需要注意的是，即使有些浏览器支持这种功能，但表示值的方式可能会有所区别。例如，Firefox和Safari会返回将所有颜色转换成RGB格式。因此，即使getComputedStyle()方法时，最好多在几种浏览器中测试一下。 \n\nIE不支持getComputedStyle()方法，但它有一种类似的概念。在IE中，每个具有style属性的元素还有一个currentStyle属性。这个属性是CSSStyleDeclaration的实例，包含当前元素全部计算后的样式。取得这些样式的方法差不多，如下： \n```js\nvar myDiv = document.getElementById(\"myDiv\"); \nvar computedStyle = myDiv.currentStyle; \nalert(computedStyle.backgroundColor); //\"red\"\n```\n总结一下：通过document.defaultView.getComputedStyle()得到背景色，不同浏览器得到的不一样，可能会返回将所有颜色转换成RGB格式，也可能是颜色值。\nIE通过currentStyle方法得到的颜色值没有将颜色转化成RGB格式。\n\n> 最终获取特定元素的计算样式\n\n```js\nfunction getStyle(elem, property){\n    if(elem || !property){\n        return false;\n    }\n    \n    var value = elem.style[property];\n    var css;\n    if(!value){\n        if(document.defaultView && document.defaultView.getComputedStyle){\n            css = document.defaultView.getComputedStyle(elem, null);\n             value = css ? css.getPropertyValue(property) : null;\n        }\n    }\n    return value;\n}\n```\n以上是不考虑 `!important` 这种情况,因为优先级规则的计算，!important永远处在食物链的最顶层。","source":"_posts/getComputedStyle.md","raw":"---\ntitle: 获取元素的最终 background-color\ndate: 2018-3-21 20:16:36\ntags:\n  - css\n  - js\ncategorise:\n  - js\nauthor:\n  nick: zmc\n  link:  https://www.zhoumengcheng.cn\ncover: https://images.zhoumengcheng.cn/jsript.jpg\nsubtitle: 对网页进行调试的过程中，经常会用到js来获取元素的CSS样式，方法有很多很多\n---\n\nJS中使用document.defaultView.getComputedStyle()、currentStyle()方法获取CSS属性值\n在对网页进行调试的过程中，经常会用到js来获取元素的CSS样式，方法有很多很多,总结如下：\n\n1. obj.style：这个方法只能JS只能获取写在html标签中的写在style属性中的值（style=”…”），而无法获取定义在`<style type=\"text/css\">`里面的属性。\n\n```html\n<html xmlns=”http://www.w3.org/1999/xhtml“> \n<head> \n<meta http-equiv=”Content-Type” content=”text/html; charset=utf-8″ /> \n<title>JS获取CSS属性值</title> \n<style type=”text/css”> \n<!– \n.ss{color:#cdcdcd;} \n–> \n</style> \n</head> \n\n<body> \n<div id=”css88″ class=”ss” style=”width:200px; height:200px; background:#333333″>JS获取CSS属性值</div> \n<script type=”text/javascript”> \nalert(document.getElementById(“css88″).style.width);//200px \nalert(document.getElementById(“css88″).style.color);//空白 \n</script> \n</body> \n</html>\n```\n\n2. IE中使用的是obj.currentStyle方法，而FF是用的是getComputedStyle 方法 \n\n“DOM2级样式”增强了document.defaultView，提供了getComputedStyle()方法。这个方法接受两个参数：要取得计算样式的元素和一个伪元素字符串（例如“:after”）。如果不需要伪元素信息，第二个参数可以是null。getComputerStyle()方法返回一个CSSStyleDeclaration对象，其中包含当前元素的所有计算的样式。\n\n其语法为：document.defaultView.getComputedStyle('元素', '伪类')；\n\n以下面的HTML页面为例：\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>计算元素样式</title>\n<style>\n#myDiv {\nbackground-color:blue;\nwidth:100px;\nheight:200px;\n}\n</style>\n</head>\n<body>\n<div id =\"myDiv\" style=\"background-color:red; border:1px solid black\"></div>\n<script>\nvar myDiv = document.getElementById(\"myDiv\");\nvar computedStyle = document.defaultView.getComputedStyle(myDiv, null);\nalert(computedStyle.backgroundColor); //\"red\"\n</script>\n</body>\n</html>\n```\n\n边框属性可能也不会返回样式表中实际的border规则（Opera会返回，但其它浏览器不会）。存在这个差别的原因是不同浏览器解释综合属性的方式不同，因为设置这种属性实际上会涉及很多其他的属性。在设置border时，实际上是设置了四个边的边框宽度、颜色、样式属性。因此，即使computedStyle.border不会在所有浏览器中都返回值，但computedStyle.borderLeftWidth则会返回值。 \n\n需要注意的是，即使有些浏览器支持这种功能，但表示值的方式可能会有所区别。例如，Firefox和Safari会返回将所有颜色转换成RGB格式。因此，即使getComputedStyle()方法时，最好多在几种浏览器中测试一下。 \n\nIE不支持getComputedStyle()方法，但它有一种类似的概念。在IE中，每个具有style属性的元素还有一个currentStyle属性。这个属性是CSSStyleDeclaration的实例，包含当前元素全部计算后的样式。取得这些样式的方法差不多，如下： \n```js\nvar myDiv = document.getElementById(\"myDiv\"); \nvar computedStyle = myDiv.currentStyle; \nalert(computedStyle.backgroundColor); //\"red\"\n```\n总结一下：通过document.defaultView.getComputedStyle()得到背景色，不同浏览器得到的不一样，可能会返回将所有颜色转换成RGB格式，也可能是颜色值。\nIE通过currentStyle方法得到的颜色值没有将颜色转化成RGB格式。\n\n> 最终获取特定元素的计算样式\n\n```js\nfunction getStyle(elem, property){\n    if(elem || !property){\n        return false;\n    }\n    \n    var value = elem.style[property];\n    var css;\n    if(!value){\n        if(document.defaultView && document.defaultView.getComputedStyle){\n            css = document.defaultView.getComputedStyle(elem, null);\n             value = css ? css.getPropertyValue(property) : null;\n        }\n    }\n    return value;\n}\n```\n以上是不考虑 `!important` 这种情况,因为优先级规则的计算，!important永远处在食物链的最顶层。","slug":"getComputedStyle","published":1,"updated":"2018-04-27T07:02:56.316Z","_id":"cjgc242u00000igr6jrnmepr5","comments":1,"layout":"post","photos":[],"link":"","content":"<p>JS中使用document.defaultView.getComputedStyle()、currentStyle()方法获取CSS属性值<br>在对网页进行调试的过程中，经常会用到js来获取元素的CSS样式，方法有很多很多,总结如下：</p>\n<ol>\n<li>obj.style：这个方法只能JS只能获取写在html标签中的写在style属性中的值（style=”…”），而无法获取定义在<code>&lt;style type=&quot;text/css&quot;&gt;</code>里面的属性。</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">”http://www.w3.org/1999/xhtml“</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">”Content-Type”</span> <span class=\"attr\">content</span>=<span class=\"string\">”text/html;</span> <span class=\"attr\">charset</span>=<span class=\"string\">utf-8″</span> /&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>JS获取CSS属性值<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">”text/css”</span>&gt;</span><span class=\"undefined\"> </span></span><br><span class=\"line\"><span class=\"undefined\">&lt;!– </span></span><br><span class=\"line\"><span class=\"undefined\">.ss&#123;color:#cdcdcd;&#125; </span></span><br><span class=\"line\"><span class=\"undefined\">–&gt; </span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">”css88″</span> <span class=\"attr\">class</span>=<span class=\"string\">”ss”</span> <span class=\"attr\">style</span>=<span class=\"string\">”width:200px;</span> <span class=\"attr\">height:200px</span>; <span class=\"attr\">background:</span>#<span class=\"attr\">333333</span>″&gt;</span>JS获取CSS属性值<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">”text/javascript”</span>&gt;</span><span class=\"undefined\"> </span></span><br><span class=\"line\"><span class=\"javascript\">alert(<span class=\"built_in\">document</span>.getElementById(“css88″).style.width);<span class=\"comment\">//200px </span></span></span><br><span class=\"line\"><span class=\"javascript\">alert(<span class=\"built_in\">document</span>.getElementById(“css88″).style.color);<span class=\"comment\">//空白 </span></span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ol>\n<li>IE中使用的是obj.currentStyle方法，而FF是用的是getComputedStyle 方法 </li>\n</ol>\n<p>“DOM2级样式”增强了document.defaultView，提供了getComputedStyle()方法。这个方法接受两个参数：要取得计算样式的元素和一个伪元素字符串（例如“:after”）。如果不需要伪元素信息，第二个参数可以是null。getComputerStyle()方法返回一个CSSStyleDeclaration对象，其中包含当前元素的所有计算的样式。</p>\n<p>其语法为：document.defaultView.getComputedStyle(‘元素’, ‘伪类’)；</p>\n<p>以下面的HTML页面为例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>计算元素样式<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">#myDiv &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">background-color:blue;</span></span><br><span class=\"line\"><span class=\"undefined\">width:100px;</span></span><br><span class=\"line\"><span class=\"undefined\">height:200px;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span> =<span class=\"string\">\"myDiv\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"background-color:red; border:1px solid black\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> myDiv = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"myDiv\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> computedStyle = <span class=\"built_in\">document</span>.defaultView.getComputedStyle(myDiv, <span class=\"literal\">null</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">alert(computedStyle.backgroundColor); <span class=\"comment\">//\"red\"</span></span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>边框属性可能也不会返回样式表中实际的border规则（Opera会返回，但其它浏览器不会）。存在这个差别的原因是不同浏览器解释综合属性的方式不同，因为设置这种属性实际上会涉及很多其他的属性。在设置border时，实际上是设置了四个边的边框宽度、颜色、样式属性。因此，即使computedStyle.border不会在所有浏览器中都返回值，但computedStyle.borderLeftWidth则会返回值。 </p>\n<p>需要注意的是，即使有些浏览器支持这种功能，但表示值的方式可能会有所区别。例如，Firefox和Safari会返回将所有颜色转换成RGB格式。因此，即使getComputedStyle()方法时，最好多在几种浏览器中测试一下。 </p>\n<p>IE不支持getComputedStyle()方法，但它有一种类似的概念。在IE中，每个具有style属性的元素还有一个currentStyle属性。这个属性是CSSStyleDeclaration的实例，包含当前元素全部计算后的样式。取得这些样式的方法差不多，如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myDiv = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"myDiv\"</span>); </span><br><span class=\"line\"><span class=\"keyword\">var</span> computedStyle = myDiv.currentStyle; </span><br><span class=\"line\">alert(computedStyle.backgroundColor); <span class=\"comment\">//\"red\"</span></span><br></pre></td></tr></table></figure></p>\n<p>总结一下：通过document.defaultView.getComputedStyle()得到背景色，不同浏览器得到的不一样，可能会返回将所有颜色转换成RGB格式，也可能是颜色值。<br>IE通过currentStyle方法得到的颜色值没有将颜色转化成RGB格式。</p>\n<blockquote>\n<p>最终获取特定元素的计算样式</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getStyle</span>(<span class=\"params\">elem, property</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(elem || !property)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> value = elem.style[property];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> css;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!value)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">document</span>.defaultView &amp;&amp; <span class=\"built_in\">document</span>.defaultView.getComputedStyle)&#123;</span><br><span class=\"line\">            css = <span class=\"built_in\">document</span>.defaultView.getComputedStyle(elem, <span class=\"literal\">null</span>);</span><br><span class=\"line\">             value = css ? css.getPropertyValue(property) : <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上是不考虑 <code>!important</code> 这种情况,因为优先级规则的计算，!important永远处在食物链的最顶层。</p>\n","site":{"data":{"contact":[{"title":"github","icon":"icon-github","link":"https://github.com/successz"},{"title":"email","icon":"icon-email","link":"284939796@qq.com"},{"title":"rss","icon":"icon-rss","link":"/atom.xml"}]}},"excerpt":"","more":"<p>JS中使用document.defaultView.getComputedStyle()、currentStyle()方法获取CSS属性值<br>在对网页进行调试的过程中，经常会用到js来获取元素的CSS样式，方法有很多很多,总结如下：</p>\n<ol>\n<li>obj.style：这个方法只能JS只能获取写在html标签中的写在style属性中的值（style=”…”），而无法获取定义在<code>&lt;style type=&quot;text/css&quot;&gt;</code>里面的属性。</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">”http://www.w3.org/1999/xhtml“</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">”Content-Type”</span> <span class=\"attr\">content</span>=<span class=\"string\">”text/html;</span> <span class=\"attr\">charset</span>=<span class=\"string\">utf-8″</span> /&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>JS获取CSS属性值<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">”text/css”</span>&gt;</span><span class=\"undefined\"> </span></span><br><span class=\"line\"><span class=\"undefined\">&lt;!– </span></span><br><span class=\"line\"><span class=\"undefined\">.ss&#123;color:#cdcdcd;&#125; </span></span><br><span class=\"line\"><span class=\"undefined\">–&gt; </span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">”css88″</span> <span class=\"attr\">class</span>=<span class=\"string\">”ss”</span> <span class=\"attr\">style</span>=<span class=\"string\">”width:200px;</span> <span class=\"attr\">height:200px</span>; <span class=\"attr\">background:</span>#<span class=\"attr\">333333</span>″&gt;</span>JS获取CSS属性值<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">”text/javascript”</span>&gt;</span><span class=\"undefined\"> </span></span><br><span class=\"line\"><span class=\"javascript\">alert(<span class=\"built_in\">document</span>.getElementById(“css88″).style.width);<span class=\"comment\">//200px </span></span></span><br><span class=\"line\"><span class=\"javascript\">alert(<span class=\"built_in\">document</span>.getElementById(“css88″).style.color);<span class=\"comment\">//空白 </span></span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ol>\n<li>IE中使用的是obj.currentStyle方法，而FF是用的是getComputedStyle 方法 </li>\n</ol>\n<p>“DOM2级样式”增强了document.defaultView，提供了getComputedStyle()方法。这个方法接受两个参数：要取得计算样式的元素和一个伪元素字符串（例如“:after”）。如果不需要伪元素信息，第二个参数可以是null。getComputerStyle()方法返回一个CSSStyleDeclaration对象，其中包含当前元素的所有计算的样式。</p>\n<p>其语法为：document.defaultView.getComputedStyle(‘元素’, ‘伪类’)；</p>\n<p>以下面的HTML页面为例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>计算元素样式<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">#myDiv &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">background-color:blue;</span></span><br><span class=\"line\"><span class=\"undefined\">width:100px;</span></span><br><span class=\"line\"><span class=\"undefined\">height:200px;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span> =<span class=\"string\">\"myDiv\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"background-color:red; border:1px solid black\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> myDiv = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"myDiv\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> computedStyle = <span class=\"built_in\">document</span>.defaultView.getComputedStyle(myDiv, <span class=\"literal\">null</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">alert(computedStyle.backgroundColor); <span class=\"comment\">//\"red\"</span></span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>边框属性可能也不会返回样式表中实际的border规则（Opera会返回，但其它浏览器不会）。存在这个差别的原因是不同浏览器解释综合属性的方式不同，因为设置这种属性实际上会涉及很多其他的属性。在设置border时，实际上是设置了四个边的边框宽度、颜色、样式属性。因此，即使computedStyle.border不会在所有浏览器中都返回值，但computedStyle.borderLeftWidth则会返回值。 </p>\n<p>需要注意的是，即使有些浏览器支持这种功能，但表示值的方式可能会有所区别。例如，Firefox和Safari会返回将所有颜色转换成RGB格式。因此，即使getComputedStyle()方法时，最好多在几种浏览器中测试一下。 </p>\n<p>IE不支持getComputedStyle()方法，但它有一种类似的概念。在IE中，每个具有style属性的元素还有一个currentStyle属性。这个属性是CSSStyleDeclaration的实例，包含当前元素全部计算后的样式。取得这些样式的方法差不多，如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myDiv = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"myDiv\"</span>); </span><br><span class=\"line\"><span class=\"keyword\">var</span> computedStyle = myDiv.currentStyle; </span><br><span class=\"line\">alert(computedStyle.backgroundColor); <span class=\"comment\">//\"red\"</span></span><br></pre></td></tr></table></figure></p>\n<p>总结一下：通过document.defaultView.getComputedStyle()得到背景色，不同浏览器得到的不一样，可能会返回将所有颜色转换成RGB格式，也可能是颜色值。<br>IE通过currentStyle方法得到的颜色值没有将颜色转化成RGB格式。</p>\n<blockquote>\n<p>最终获取特定元素的计算样式</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getStyle</span>(<span class=\"params\">elem, property</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(elem || !property)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> value = elem.style[property];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> css;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!value)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">document</span>.defaultView &amp;&amp; <span class=\"built_in\">document</span>.defaultView.getComputedStyle)&#123;</span><br><span class=\"line\">            css = <span class=\"built_in\">document</span>.defaultView.getComputedStyle(elem, <span class=\"literal\">null</span>);</span><br><span class=\"line\">             value = css ? css.getPropertyValue(property) : <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上是不考虑 <code>!important</code> 这种情况,因为优先级规则的计算，!important永远处在食物链的最顶层。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjdi72vic00029gr6643323yq","category_id":"cjdi72vij00049gr6u4q512ra","_id":"cjdi72vjl000k9gr65z9vwj8k"},{"post_id":"cjdi72vir00069gr6buhwbw7k","category_id":"cjdi72vjg000g9gr6xjw389uk","_id":"cjdi72vjp000p9gr6uctgkq0o"},{"post_id":"cjdi72vix00089gr6ekzmxax9","category_id":"cjdi72vjm000l9gr65rni8zz6","_id":"cjdi72vjs000s9gr6oanpyll7"},{"post_id":"cjdi72vhw00009gr6hhpk18ar","category_id":"cjdi72vij00049gr6u4q512ra","_id":"cjdi72vjv000v9gr63joqfnt1"},{"post_id":"cjdi72vhw00009gr6hhpk18ar","category_id":"cjdi72vjq000q9gr6n5ltwyxk","_id":"cjdi72vjw000y9gr68r3xdd9y"},{"post_id":"cjdi72vj100099gr6koi1amsz","category_id":"cjdi72vjs000t9gr6he308dqy","_id":"cjdi72vjy00109gr6kxgn1i1b"},{"post_id":"cjdi72vj8000d9gr60ha4etoy","category_id":"cjdi72vjm000l9gr65rni8zz6","_id":"cjdi72vjz00119gr6e413r8xm"},{"post_id":"cjdi72vjd000f9gr6pjaveo4f","category_id":"cjdi72vjm000l9gr65rni8zz6","_id":"cjdi72vk000129gr6kfk5b06f"},{"post_id":"cjdi72vkr00139gr6nuduolm8","category_id":"cjdi72vjg000g9gr6xjw389uk","_id":"cjdi72vky00159gr6ypyhe9ue"},{"post_id":"cjfv0h95w0000f8r61h5ujybi","category_id":"cjfv0h9670001f8r69q4zhnhw","_id":"cjfv0h96m0004f8r61mekjop5"},{"post_id":"cjfwe7o1t0000asr681bx4y4c","category_id":"cjdi72vjm000l9gr65rni8zz6","_id":"cjfwe7o280002asr6kf6mcs7s"}],"PostTag":[{"post_id":"cjdi72vix00089gr6ekzmxax9","tag_id":"cjdi72viq00059gr6zwmtcuwb","_id":"cjdi72vj7000c9gr6rhkys8h3"},{"post_id":"cjdi72vhw00009gr6hhpk18ar","tag_id":"cjdi72viq00059gr6zwmtcuwb","_id":"cjdi72vjb000e9gr6m5o9ko4i"},{"post_id":"cjdi72vj8000d9gr60ha4etoy","tag_id":"cjdi72viq00059gr6zwmtcuwb","_id":"cjdi72vjj000i9gr6td9mzhv6"},{"post_id":"cjdi72vic00029gr6643323yq","tag_id":"cjdi72vj4000b9gr6gwd5ljfl","_id":"cjdi72vjl000j9gr6usdbou8f"},{"post_id":"cjdi72vjd000f9gr6pjaveo4f","tag_id":"cjdi72viq00059gr6zwmtcuwb","_id":"cjdi72vjn000n9gr6g4tq5jnn"},{"post_id":"cjdi72vir00069gr6buhwbw7k","tag_id":"cjdi72vji000h9gr6ro4ebayl","_id":"cjdi72vjo000o9gr64iuyc62f"},{"post_id":"cjdi72vj100099gr6koi1amsz","tag_id":"cjdi72vjn000m9gr6y37f3ys0","_id":"cjdi72vju000u9gr69w75y6fw"},{"post_id":"cjdi72vj100099gr6koi1amsz","tag_id":"cjdi72vjr000r9gr6tthy1vyj","_id":"cjdi72vjv000w9gr6vwzmpsa0"},{"post_id":"cjdi72vkr00139gr6nuduolm8","tag_id":"cjdi72vkx00149gr6t2se8tjh","_id":"cjdi72vky00169gr6mdq9yfly"},{"post_id":"cjdi72vkr00139gr6nuduolm8","tag_id":"cjdi72vji000h9gr6ro4ebayl","_id":"cjdi72vky00179gr6lvamzyp8"},{"post_id":"cjfv0h95w0000f8r61h5ujybi","tag_id":"cjfv0h96h0002f8r60our4wt1","_id":"cjfv0h96j0003f8r6rcc8egei"},{"post_id":"cjfwe7o1t0000asr681bx4y4c","tag_id":"cjdi72viq00059gr6zwmtcuwb","_id":"cjfwe7o260001asr6c4drh3hv"},{"post_id":"cjgc242u00000igr6jrnmepr5","tag_id":"cjdi72vj4000b9gr6gwd5ljfl","_id":"cjgc242ub0001igr62u2m2b0n"},{"post_id":"cjgc242u00000igr6jrnmepr5","tag_id":"cjdi72viq00059gr6zwmtcuwb","_id":"cjgc242uc0002igr6gqui7o1d"}],"Tag":[{"name":"js","_id":"cjdi72viq00059gr6zwmtcuwb"},{"name":"css","_id":"cjdi72vj4000b9gr6gwd5ljfl"},{"name":"linux","_id":"cjdi72vji000h9gr6ro4ebayl"},{"name":"https","_id":"cjdi72vjn000m9gr6y37f3ys0"},{"name":"html","_id":"cjdi72vjr000r9gr6tthy1vyj"},{"name":"git","_id":"cjdi72vkx00149gr6t2se8tjh"},{"name":"http","_id":"cjfv0h96h0002f8r60our4wt1"}]}}